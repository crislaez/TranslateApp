{"ast":null,"code":"const Path = require('path');\n\nconst fs = require('fs');\n\nconst passError = require('passerror');\n\nconst memoizeAsync = require('memoizeasync');\n\nconst DOMParser = require('@xmldom/xmldom').DOMParser;\n\nconst xpath = require('xpath');\n\nconst seq = require('seq');\n\nconst normalizeLocaleId = require('./normalizeLocaleId');\n\nconst normalizeProperty = require('./normalizeProperty');\n\nconst convertObjectsWithIntegerKeysToArrays = require('./convertObjectsWithIntegerKeysToArrays');\n\nconst CldrPluralRuleSet = require('./CldrPluralRuleSet');\n\nconst CldrRbnfRuleSet = require('./CldrRbnfRuleSet');\n\nconst escodegen = require('escodegen');\n\nconst unicoderegexp = require('unicoderegexp');\n\nfunction normalizeXPathQuery(xpathQuery) {\n  const xpathQueryFragments = xpathQuery.split('/');\n\n  for (let i = 0; i < xpathQueryFragments.length; i += 1) {\n    if (i > 0 && xpathQueryFragments[i] === '..' && xpathQueryFragments[i - 1] !== '..') {\n      xpathQueryFragments.splice(i - 1, 2);\n      i -= 2;\n    }\n  }\n\n  return xpathQueryFragments.join('/');\n}\n\nfunction Cldr(cldrPath) {\n  // Support instantiation without the 'new' operator:\n  if (!(this instanceof Cldr)) {\n    return new Cldr(cldrPath);\n  }\n\n  this.cldrPath = cldrPath;\n  this.documentByFileName = {};\n  this.memoizerByFileName = {};\n}\n\nCldr.prototype = {\n  fileNamesByTypeAndNormalizedLocaleId(type = 'main') {\n    if (!this._fileNamesByTypeAndNormalizedLocaleId) {\n      this._fileNamesByTypeAndNormalizedLocaleId = {};\n    }\n\n    if (typeof this._fileNamesByTypeAndNormalizedLocaleId[type] === 'undefined') {\n      this._fileNamesByTypeAndNormalizedLocaleId[type] = {};\n      let fileNames;\n\n      try {\n        fileNames = fs.readdirSync(Path.resolve(this.cldrPath, 'common', type));\n      } catch (e) {\n        if (e.code === 'ENOENT') {\n          // Directory doesn't exist, just pretend it's empty.\n          return;\n        }\n      }\n\n      fileNames.forEach(function (fileName) {\n        const matchFileName = fileName.match(/^(.*)\\.xml$/);\n\n        if (matchFileName) {\n          this._fileNamesByTypeAndNormalizedLocaleId[type][normalizeLocaleId(matchFileName[1])] = Path.resolve(this.cldrPath, 'common', type, fileName);\n        }\n      }, this);\n    }\n\n    return this._fileNamesByTypeAndNormalizedLocaleId[type];\n  },\n\n  get localeIds() {\n    if (!this._localeIds) {\n      this._localeIds = Object.keys(this.fileNamesByTypeAndNormalizedLocaleId('main'));\n    }\n\n    return this._localeIds;\n  },\n\n  get localeIdsSet() {\n    if (!this._localeIdsSet) {\n      this._localeIdsSet = new Set(this.localeIds);\n    }\n\n    return this._localeIdsSet;\n  },\n\n  checkValidLocaleId(localeId) {\n    if (!this.localeIdsSet.has(normalizeLocaleId(localeId))) {\n      throw new Error(`No data for locale id: ${localeId}`);\n    }\n  },\n\n  get calendarIds() {\n    if (!this._calendarIds) {\n      this._calendarIds = [];\n      xpath.select('/ldmlBCP47/keyword/key[@name=\"ca\"]/type', this.getDocument(Path.resolve(this.cldrPath, 'common', 'bcp47', 'calendar.xml'))).forEach(function (keyNode) {\n        let calendarId = keyNode.getAttribute('name');\n\n        if (calendarId === 'gregory') {\n          calendarId = 'gregorian';\n        }\n\n        this._calendarIds.push(calendarId);\n      }, this);\n    }\n\n    return this._calendarIds;\n  },\n\n  get numberSystemIds() {\n    if (!this._numberSystemIds) {\n      this._numberSystemIds = [];\n      xpath.select('/ldmlBCP47/keyword/key[@name=\"nu\"]/type', this.getDocument(Path.resolve(this.cldrPath, 'common', 'bcp47', 'number.xml'))).forEach(function (keyNode) {\n        this._numberSystemIds.push(keyNode.getAttribute('name'));\n      }, this);\n    }\n\n    return this._numberSystemIds;\n  },\n\n  get localesByParentLocale() {\n    if (!this._localesByParentLocale) {\n      this._localesByParentLocale = {};\n      xpath.select('/supplementalData/parentLocales/parentLocale', this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'supplementalData.xml'))).forEach(function (parentLocaleNode) {\n        this._localesByParentLocale[normalizeLocaleId(parentLocaleNode.getAttribute('parent'))] = parentLocaleNode.getAttribute('locales').split(' ').map(localeId => normalizeLocaleId(localeId));\n      }, this);\n    }\n\n    return this._localesByParentLocale;\n  },\n\n  get windowsZonesByMapZone() {\n    if (!this._windowsZonesByMapZone) {\n      this._windowsZonesByMapZone = [];\n      xpath.select('/supplementalData/windowsZones/mapTimezones/mapZone', this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'windowsZones.xml'))).forEach(function (keyNode) {\n        keyNode.getAttribute('type').split(/\\s+/).forEach(function (typeEntry) {\n          this._windowsZonesByMapZone.push({\n            name: typeEntry,\n            territory: keyNode.getAttribute('territory'),\n            timeZone: keyNode.getAttribute('other')\n          });\n        }, this);\n      }, this);\n    }\n\n    return this._windowsZonesByMapZone;\n  },\n\n  // Works both async and sync (omit cb):\n  getDocument(fileName, cb) {\n    const that = this;\n\n    if (that.documentByFileName[fileName]) {\n      if (cb) {\n        process.nextTick(() => {\n          cb(null, that.documentByFileName[fileName]);\n        });\n      } else {\n        return that.documentByFileName[fileName];\n      }\n    } else {\n      if (cb) {\n        // Make sure not to load file more than once if it's being loaded when getDocument is called for the second time:\n        that.memoizerByFileName[fileName] = that.memoizerByFileName[fileName] || memoizeAsync(cb => {\n          fs.readFile(fileName, 'utf-8', passError(cb, xmlString => {\n            const document = new DOMParser().parseFromString(xmlString);\n            that.documentByFileName[fileName] = document;\n            cb(null, document);\n          }));\n        });\n        that.memoizerByFileName[fileName](cb);\n      } else {\n        return that.documentByFileName[fileName] = new DOMParser().parseFromString(fs.readFileSync(fileName, 'utf-8'));\n      }\n    }\n  },\n\n  resolveParentLocaleId(localeId) {\n    localeId = normalizeLocaleId(localeId);\n\n    if (!localeId) {\n      return;\n    }\n\n    let parentLocaleId;\n    Object.keys(this.localesByParentLocale).forEach(function (_parentLocaleId) {\n      if (this.localesByParentLocale[_parentLocaleId].indexOf(localeId) > -1) {\n        parentLocaleId = _parentLocaleId;\n      }\n    }, this);\n\n    if (!parentLocaleId && /_[^_]+$/.test(localeId)) {\n      parentLocaleId = localeId.replace(/_[^_]+$/, '');\n    }\n\n    return parentLocaleId;\n  },\n\n  extractWindowsZonesByTimeZone(timeZone) {\n    if (!timeZone) {\n      return;\n    }\n\n    return this.windowsZonesByMapZone.filter(element => element.timeZone.toLowerCase() === timeZone.toLowerCase());\n  },\n\n  extractWindowsZonesByName(name) {\n    if (!name) {\n      return;\n    }\n\n    return this.windowsZonesByMapZone.filter(element => element.name.toLowerCase() === name.toLowerCase());\n  },\n\n  expandLocaleIdToPrioritizedList(localeId) {\n    localeId = normalizeLocaleId(localeId);\n\n    if (!localeId) {\n      return [];\n    }\n\n    const localeIds = [localeId];\n    let parentLocaleId = this.resolveParentLocaleId(localeId);\n\n    while (parentLocaleId) {\n      localeIds.push(parentLocaleId);\n      parentLocaleId = this.resolveParentLocaleId(parentLocaleId);\n    }\n\n    return localeIds;\n  },\n\n  getPrioritizedDocumentsForLocale(localeId, type) {\n    this.checkValidLocaleId(localeId);\n    const that = this;\n    return that.expandLocaleIdToPrioritizedList(localeId).concat('root').map(subLocaleId => that.fileNamesByTypeAndNormalizedLocaleId(type)[normalizeLocaleId(subLocaleId)]).filter(fileName => !!fileName).map(fileName => that.getDocument(fileName));\n  },\n\n  preload(localeIds, cb) {\n    const that = this;\n\n    if (typeof localeIds === 'function') {\n      cb = localeIds;\n      localeIds = that.localeIds;\n    }\n\n    localeIds = (Array.isArray(localeIds) ? localeIds : [localeIds]).map(normalizeLocaleId);\n    const neededLocaleById = {\n      root: true\n    };\n    localeIds.forEach(localeId => {\n      that.expandLocaleIdToPrioritizedList(localeId).forEach(subLocaleId => {\n        neededLocaleById[subLocaleId] = true;\n      });\n    });\n    const fileNames = [Path.resolve(that.cldrPath, 'common', 'supplemental', 'plurals.xml'), Path.resolve(that.cldrPath, 'common', 'supplemental', 'numberingSystems.xml')];\n    Object.keys(neededLocaleById).forEach(localeId => {\n      ['main', 'rbnf'].forEach(type => {\n        const fileName = that.fileNamesByTypeAndNormalizedLocaleId(type)[localeId];\n\n        if (fileName) {\n          fileNames.push(fileName);\n        }\n      });\n    });\n    seq(fileNames).parEach(20, function (fileName) {\n      that.getDocument(fileName, this);\n    }).seq(() => {\n      cb();\n    }).catch(cb);\n  },\n\n  createFinder(prioritizedDocuments) {\n    return function finder(xpathQuery) {\n      const prioritizedResults = [];\n      prioritizedDocuments.forEach((document, i) => {\n        const resultsForLocaleDocument = xpath.select(xpathQuery, document);\n\n        if (resultsForLocaleDocument.length === 0 && i === prioritizedDocuments.length - 1) {\n          // We're in root and there were no results, look for alias elements in path:\n          const queryFragments = xpathQuery.split('/');\n          const poppedQueryFragments = [];\n\n          while (queryFragments.length > 1) {\n            const aliasNodes = xpath.select(queryFragments.join('/') + '/alias', document);\n\n            if (aliasNodes.length > 0) {\n              const aliasSpecifiedQuery = normalizeXPathQuery(queryFragments.join('/') + '/' + aliasNodes[0].getAttribute('path') + '/' + poppedQueryFragments.join('/'));\n              Array.prototype.push.apply(prioritizedResults, finder(aliasSpecifiedQuery));\n              break;\n            }\n\n            poppedQueryFragments.unshift(queryFragments.pop());\n          }\n        } else {\n          Array.prototype.push.apply(prioritizedResults, resultsForLocaleDocument);\n        }\n      });\n      return prioritizedResults;\n    };\n  },\n\n  extractLocaleDisplayPattern(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const localeDisplayPattern = {};\n    finder('/ldml/localeDisplayNames/localeDisplayPattern/*').forEach(node => {\n      localeDisplayPattern[node.nodeName] = node.textContent;\n    });\n    return localeDisplayPattern;\n  },\n\n  extractLanguageDisplayNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const languageDisplayNames = {};\n    finder('/ldml/localeDisplayNames/languages/language').forEach(node => {\n      const id = normalizeLocaleId(node.getAttribute('type'));\n      languageDisplayNames[id] = languageDisplayNames[id] || node.textContent;\n    });\n    return languageDisplayNames;\n  },\n\n  extractTimeZoneDisplayNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const timeZoneDisplayNames = {};\n    finder('/ldml/dates/timeZoneNames/zone').forEach(zoneNode => {\n      const timeZoneId = zoneNode.getAttribute('type');\n      const exemplarCityNodes = xpath.select('exemplarCity', zoneNode);\n      let tzNameLocale;\n\n      if (exemplarCityNodes.length > 0) {\n        tzNameLocale = exemplarCityNodes[0].textContent;\n      } else {\n        const genericDisplayNameNodes = xpath.select('long/generic', zoneNode);\n\n        if (genericDisplayNameNodes.length > 0) {\n          tzNameLocale = genericDisplayNameNodes[0].textContent;\n        } else {\n          const longDisplayNameNodes = xpath.select('long/standard', zoneNode);\n\n          if (longDisplayNameNodes.length > 0) {\n            tzNameLocale = longDisplayNameNodes[0].textContent;\n          }\n        }\n      }\n\n      if (tzNameLocale) {\n        timeZoneDisplayNames[timeZoneId] = timeZoneDisplayNames[timeZoneId] || tzNameLocale;\n      }\n    });\n    return timeZoneDisplayNames;\n  },\n\n  extractTimeZoneFormats(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const timeZoneFormats = {};\n    ['hourFormat', 'gmtFormat', 'gmtZeroFormat', 'regionFormat', 'fallbackFormat', 'fallbackRegionFormat'].forEach(tagName => {\n      finder('/ldml/dates/timeZoneNames/' + tagName).forEach(node => {\n        const formatName = node.nodeName.replace(/Format$/, '');\n        let value = node.textContent;\n\n        if (formatName === 'hour') {\n          value = value.split(';');\n        }\n\n        timeZoneFormats[formatName] = timeZoneFormats[formatName] || value;\n      });\n    });\n    finder('/ldml/dates/timeZoneNames/regionFormat[@type]').forEach(node => {\n      const type = node.getAttribute('type');\n      timeZoneFormats.regions = timeZoneFormats.regions || {};\n      timeZoneFormats.regions[type] = timeZoneFormats.regions[type] || node.textContent;\n    });\n    return timeZoneFormats;\n  },\n\n  extractTerritoryDisplayNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const territoryDisplayNames = {};\n    finder('/ldml/localeDisplayNames/territories/territory').forEach(territoryNode => {\n      let territoryId = territoryNode.getAttribute('type');\n      const alternative = territoryNode.getAttribute('alt');\n\n      if (alternative) {\n        // Use the same format for alternative names as cldr-json (e.g. BA-alt-short)\n        territoryId = `${territoryId}-alt-${alternative}`;\n      }\n\n      territoryDisplayNames[territoryId] = territoryDisplayNames[territoryId] || territoryNode.textContent;\n    });\n    return territoryDisplayNames;\n  },\n\n  /**\n   * Subdivisions are usually subnational administrative entities.\n   * Codes follow the BCP47 standard, e.g. `usca` for California, USA.\n   * Note that these codes are similar but not identical to ISO 3166-2 codes.\n   * Unlike ISO 3166-2, CLDR never reuses a code.\n   *\n   * @param {string} localeId Locale or subdivision names\n   * @returns {Object} A dictionary of subdivision codes and their names.\n   *\n   * @example\n   * // returns 'Zealand'\n   * cldr.extractSubdivisionDisplayNames('en').dk85\n   */\n  extractSubdivisionDisplayNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'subdivisions'));\n    const subdivisionDisplayNames = {};\n    finder('/ldml/localeDisplayNames/subdivisions/subdivision').forEach(node => {\n      const subdivisionId = node.getAttribute('type');\n      subdivisionDisplayNames[subdivisionId] = subdivisionDisplayNames[subdivisionId] || node.textContent;\n    });\n    return subdivisionDisplayNames;\n  },\n\n  /**\n   * Subdivision aliases contain deprecated or alternative subdivision\n   * codes. Note that the returned code may be either\n   * a territory code, (such as 'cn71' => 'TW'), or a subdivision code.\n   *\n   * @returns {Object} A dictionary with replacement code and reason\n   *\n   * @example\n   * // returns {replacement: 'cz71', reason: 'deprecated'}\n   * cldr.extractSubdivisionAliases().czol\n   *\n   * // returns {replacement: 'GU', reason: 'overlong'}\n   * cldr.extractSubdivisionAliases().usgu\n   */\n  extractSubdivisionAliases() {\n    const finder = this.createFinder([this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'supplementalMetadata.xml'))]);\n    const aliasData = {};\n    finder('/supplementalData/metadata/alias/subdivisionAlias').forEach(subdivisionAliasNode => {\n      const type = subdivisionAliasNode.getAttribute('type');\n      aliasData[type] = {\n        replacement: subdivisionAliasNode.getAttribute('replacement'),\n        reason: subdivisionAliasNode.getAttribute('reason')\n      };\n    });\n    return aliasData;\n  },\n\n  /**\n   * Territory aliases contain deprecated or alternative nation/territory\n   * codes.\n   *\n   * @returns {Object} A dictionary with replacement code and reason\n   *\n   * @example\n   * // returns {replacement: 'MM', reason: 'deprecated'}\n   * cldr.extractTerritorpAliases().BU\n   */\n  extractTerritoryAliases() {\n    const finder = this.createFinder([this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'supplementalMetadata.xml'))]);\n    const aliasData = {};\n    finder('/supplementalData/metadata/alias/territoryAlias').forEach(territoryAliasNode => {\n      const type = territoryAliasNode.getAttribute('type');\n      aliasData[type] = {\n        replacement: territoryAliasNode.getAttribute('replacement'),\n        reason: territoryAliasNode.getAttribute('reason')\n      };\n    });\n    return aliasData;\n  },\n\n  extractCurrencyInfoById(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const currencyDisplayNameByCurrencyId = {};\n    const currencyDisplayNameByCurrencyIdAndCount = {};\n    const currencySymbolByCurrencyId = {};\n    finder('/ldml/numbers/currencies/currency/displayName').forEach(displayNameNode => {\n      const currencyId = displayNameNode.parentNode.getAttribute('type');\n      const countAttribute = displayNameNode.getAttribute('count');\n\n      if (countAttribute) {\n        currencyDisplayNameByCurrencyIdAndCount[currencyId] = currencyDisplayNameByCurrencyIdAndCount[currencyId] || {};\n        currencyDisplayNameByCurrencyIdAndCount[currencyId][countAttribute] = displayNameNode.textContent;\n      } else {\n        currencyDisplayNameByCurrencyId[currencyId] = currencyDisplayNameByCurrencyId[currencyId] || displayNameNode.textContent;\n      }\n    });\n    finder('/ldml/numbers/currencies/currency/symbol').forEach(symbolNode => {\n      const currencyId = symbolNode.parentNode.getAttribute('type');\n      currencySymbolByCurrencyId[currencyId] = currencySymbolByCurrencyId[currencyId] || symbolNode.textContent;\n    });\n    const currencyInfoById = {};\n    Object.keys(currencyDisplayNameByCurrencyId).forEach(currencyId => {\n      currencyInfoById[currencyId] = Object.assign({\n        displayName: currencyDisplayNameByCurrencyId[currencyId],\n        symbol: currencySymbolByCurrencyId[currencyId]\n      }, currencyDisplayNameByCurrencyIdAndCount[currencyId]);\n    });\n    return currencyInfoById;\n  },\n\n  extractScriptDisplayNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const scriptDisplayNames = {};\n    finder('/ldml/localeDisplayNames/scripts/script').forEach(scriptNode => {\n      const id = scriptNode.getAttribute('type');\n      scriptDisplayNames[id] = scriptDisplayNames[id] || scriptNode.textContent;\n    });\n    return scriptDisplayNames;\n  },\n\n  extractVariantDisplayNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const variantDisplayNames = {};\n    finder('/ldml/localeDisplayNames/variants/variant').forEach(variantNode => {\n      const id = variantNode.getAttribute('type');\n      variantDisplayNames[id] = variantDisplayNames[id] || variantNode.textContent;\n    });\n    return variantDisplayNames;\n  },\n\n  extractKeyTypes(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const keyTypes = {};\n    finder('/ldml/localeDisplayNames/keys/key').forEach(keyNode => {\n      const type = keyNode.getAttribute('type');\n      keyTypes[type] = {\n        displayName: keyNode.textContent\n      };\n    });\n    finder('/ldml/localeDisplayNames/types/type').forEach(typeNode => {\n      const key = typeNode.getAttribute('key');\n      const type = normalizeProperty(typeNode.getAttribute('type'));\n      keyTypes[key] = keyTypes[key] || {};\n      keyTypes[key].types = keyTypes[key].types || {};\n      keyTypes[key].types[type] = typeNode.textContent;\n    });\n    return keyTypes;\n  },\n\n  extractMeasurementSystemNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const measurementSystemNames = {};\n    finder('/ldml/localeDisplayNames/measurementSystemNames/measurementSystemName').forEach(measurementSystemNameNode => {\n      const id = measurementSystemNameNode.getAttribute('type');\n      measurementSystemNames[id] = measurementSystemNames[id] || measurementSystemNameNode.textContent;\n    });\n    return measurementSystemNames;\n  },\n\n  extractCodePatterns(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const codePatterns = {};\n    finder('/ldml/localeDisplayNames/codePatterns/codePattern').forEach(codePatternNode => {\n      const id = codePatternNode.getAttribute('type');\n      codePatterns[id] = codePatterns[id] || codePatternNode.textContent;\n    });\n    return codePatterns;\n  },\n\n  // Calendar extraction methods:\n  extractEraNames(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let eraNames;\n    ['eraNames', 'eraAbbr'].forEach(eraType => {\n      const typeInOutput = {\n        eraNames: 'wide',\n        eraAbbr: 'abbreviated'\n      }[eraType];\n      finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/eras/\" + eraType + '/era').forEach(eraNode => {\n        const type = parseInt(eraNode.getAttribute('type'), 10);\n        eraNames = eraNames || {};\n        eraNames[typeInOutput] = eraNames[typeInOutput] || {};\n        eraNames[typeInOutput][type] = eraNames[typeInOutput][type] || eraNode.textContent;\n      });\n    });\n    return convertObjectsWithIntegerKeysToArrays(eraNames);\n  },\n\n  extractQuarterNames(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let quarterNames;\n    ['format', 'stand-alone'].forEach(quarterContext => {\n      const quarterContextCamelCase = normalizeProperty(quarterContext); // stand-alone => standAlone\n\n      ['abbreviated', 'narrow', 'wide'].forEach(quarterWidth => {\n        finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/quarters/quarterContext[@type='\" + quarterContext + \"']/quarterWidth[@type='\" + quarterWidth + \"']/quarter\").forEach(quarterNode => {\n          const quarterNo = parseInt(quarterNode.getAttribute('type'), 10) - 1;\n          quarterNames = quarterNames || {};\n          quarterNames[quarterContextCamelCase] = quarterNames[quarterContextCamelCase] || {};\n          quarterNames[quarterContextCamelCase][quarterWidth] = quarterNames[quarterContextCamelCase][quarterWidth] || {};\n          quarterNames[quarterContextCamelCase][quarterWidth][quarterNo] = quarterNames[quarterContextCamelCase][quarterWidth][quarterNo] || quarterNode.textContent;\n        });\n      });\n    });\n    return convertObjectsWithIntegerKeysToArrays(quarterNames);\n  },\n\n  extractDayPeriods(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let dayPeriods;\n    ['format', 'stand-alone'].forEach(dayPeriodContext => {\n      const dayPeriodContextCamelCase = normalizeProperty(dayPeriodContext); // stand-alone => standAlone\n\n      ['abbreviated', 'narrow', 'wide', 'short'].forEach(dayPeriodWidth => {\n        finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/dayPeriods/dayPeriodContext[@type='\" + dayPeriodContext + \"']/dayPeriodWidth[@type='\" + dayPeriodWidth + \"']/dayPeriod\").forEach(dayPeriodNode => {\n          const type = dayPeriodNode.getAttribute('type');\n          dayPeriods = dayPeriods || {};\n          dayPeriods[dayPeriodContextCamelCase] = dayPeriods[dayPeriodContextCamelCase] || {};\n          dayPeriods[dayPeriodContextCamelCase][dayPeriodWidth] = dayPeriods[dayPeriodContextCamelCase][dayPeriodWidth] || {};\n          dayPeriods[dayPeriodContextCamelCase][dayPeriodWidth][type] = dayPeriods[dayPeriodContextCamelCase][dayPeriodWidth][type] || dayPeriodNode.textContent;\n        });\n      });\n    });\n    return dayPeriods;\n  },\n\n  extractCyclicNames(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let cyclicNames;\n    ['dayParts', 'days', 'months', 'years', 'zodiacs'].forEach(cyclicNameSet => {\n      ['format'].forEach(cyclicNameContext => {\n        ['abbreviated', 'narrow', 'wide'].forEach(cyclicNameWidth => {\n          finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/cyclicNameSets/cyclicNameSet[@type='\" + cyclicNameSet + \"']/cyclicNameContext[@type='\" + cyclicNameContext + \"']/cyclicNameWidth[@type='\" + cyclicNameWidth + \"']/cyclicName\").forEach(cyclicNameNode => {\n            const type = cyclicNameNode.getAttribute('type');\n            cyclicNames = cyclicNames || {};\n            cyclicNames[cyclicNameSet] = cyclicNames[cyclicNameSet] || {};\n            cyclicNames[cyclicNameSet][cyclicNameContext] = cyclicNames[cyclicNameSet][cyclicNameContext] || {};\n            cyclicNames[cyclicNameSet][cyclicNameContext][cyclicNameWidth] = cyclicNames[cyclicNameSet][cyclicNameContext][cyclicNameWidth] || {};\n            cyclicNames[cyclicNameSet][cyclicNameContext][cyclicNameWidth][type] = cyclicNames[cyclicNameSet][cyclicNameContext][cyclicNameWidth][type] || cyclicNameNode.textContent;\n          });\n        });\n      });\n    });\n    return convertObjectsWithIntegerKeysToArrays(cyclicNames);\n  },\n\n  extractMonthNames(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let monthNames;\n    ['format', 'stand-alone'].forEach(monthContext => {\n      const monthContextCamelCase = normalizeProperty(monthContext); // stand-alone => standAlone\n\n      ['abbreviated', 'narrow', 'wide'].forEach(monthWidth => {\n        finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/months/monthContext[@type='\" + monthContext + \"']/monthWidth[@type='\" + monthWidth + \"']/month\").forEach(monthNode => {\n          const monthNo = parseInt(monthNode.getAttribute('type'), 10) - 1;\n          monthNames = monthNames || {};\n          monthNames[monthContextCamelCase] = monthNames[monthContextCamelCase] || {};\n          monthNames[monthContextCamelCase][monthWidth] = monthNames[monthContextCamelCase][monthWidth] || {};\n          monthNames[monthContextCamelCase][monthWidth][monthNo] = monthNames[monthContextCamelCase][monthWidth][monthNo] || monthNode.textContent;\n        });\n      });\n    });\n    return convertObjectsWithIntegerKeysToArrays(monthNames);\n  },\n\n  extractMonthPatterns(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let monthPatterns;\n    ['format', 'numeric', 'stand-alone'].forEach(monthPatternContext => {\n      const monthPatternContextCamelCase = normalizeProperty(monthPatternContext); // stand-alone => standAlone\n\n      ['abbreviated', 'narrow', 'wide', 'all'].forEach(monthPatternWidth => {\n        finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/monthPatterns/monthPatternContext[@type='\" + monthPatternContext + \"']/monthPatternWidth[@type='\" + monthPatternWidth + \"']/monthPattern\").forEach(monthPatternNode => {\n          const type = monthPatternNode.getAttribute('type');\n          monthPatterns = monthPatterns || {};\n          monthPatterns[monthPatternContextCamelCase] = monthPatterns[monthPatternContextCamelCase] || {};\n          monthPatterns[monthPatternContextCamelCase][monthPatternWidth] = monthPatterns[monthPatternContextCamelCase][monthPatternWidth] || {};\n          monthPatterns[monthPatternContextCamelCase][monthPatternWidth][type] = monthPatterns[monthPatternContextCamelCase][monthPatternWidth][type] || monthPatternNode.textContent;\n        });\n      });\n    });\n    return monthPatterns;\n  },\n\n  extractDayNames(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const dayNoByCldrId = {\n      sun: 0,\n      mon: 1,\n      tue: 2,\n      wed: 3,\n      thu: 4,\n      fri: 5,\n      sat: 6\n    };\n    let dayNames;\n    ['format', 'numeric', 'stand-alone'].forEach(dayContext => {\n      const dayContextCamelCase = normalizeProperty(dayContext); // stand-alone => standAlone\n\n      ['abbreviated', 'narrow', 'wide', 'short'].forEach(dayWidth => {\n        finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/days/dayContext[@type='\" + dayContext + \"']/dayWidth[@type='\" + dayWidth + \"']/day\").forEach(dayNode => {\n          const dayNo = dayNoByCldrId[dayNode.getAttribute('type')];\n          dayNames = dayNames || {};\n          dayNames[dayContextCamelCase] = dayNames[dayContextCamelCase] || {};\n          dayNames[dayContextCamelCase][dayWidth] = dayNames[dayContextCamelCase][dayWidth] || {};\n          dayNames[dayContextCamelCase][dayWidth][dayNo] = dayNames[dayContextCamelCase][dayWidth][dayNo] || dayNode.textContent;\n        });\n      });\n    });\n    return convertObjectsWithIntegerKeysToArrays(dayNames);\n  },\n\n  extractFields(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let fields;\n    finder('/ldml/dates/fields/field/displayName').forEach(fieldDisplayNameNode => {\n      const fieldName = fieldDisplayNameNode.parentNode.getAttribute('type');\n      fields = fields || {};\n      fields[fieldName] = fields[fieldName] || {};\n      fields[fieldName].displayName = fields[fieldName].displayName || fieldDisplayNameNode.textContent;\n    });\n    finder('/ldml/dates/fields/field/relative').forEach(fieldRelativeNode => {\n      const fieldName = fieldRelativeNode.parentNode.getAttribute('type');\n      const type = fieldRelativeNode.getAttribute('type');\n      fields = fields || {};\n      fields[fieldName] = fields[fieldName] || {};\n      fields[fieldName].relative = fields[fieldName].relative || {};\n      fields[fieldName].relative[type] = fields[fieldName].relative[type] || fieldRelativeNode.textContent;\n    });\n    finder('/ldml/dates/fields/field/relativeTime/relativeTimePattern').forEach(relativeTimePatternNode => {\n      const relativeTimeNode = relativeTimePatternNode.parentNode;\n      const fieldName = relativeTimeNode.parentNode.getAttribute('type');\n      const type = relativeTimeNode.getAttribute('type');\n      const count = relativeTimePatternNode.getAttribute('count');\n      fields = fields || {};\n      fields[fieldName] = fields[fieldName] || {};\n      fields[fieldName].relativeTime = fields[fieldName].relativeTime || {};\n      fields[fieldName].relativeTime[type] = fields[fieldName].relativeTime[type] || {};\n      fields[fieldName].relativeTime[type][count] = fields[fieldName].relativeTime[type][count] || relativeTimePatternNode.textContent;\n    });\n    return fields;\n  },\n\n  extractDateTimePatterns(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let dateTimePatterns;\n    finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/dateTimeFormats/dateTimeFormatLength/dateTimeFormat\").forEach(dateTimeFormatNode => {\n      const dateTimeFormatLengthType = dateTimeFormatNode.parentNode.getAttribute('type');\n      const patternNodes = xpath.select('pattern', dateTimeFormatNode);\n\n      if (patternNodes.length !== 1) {\n        throw new Error('Expected exactly one pattern in dateTimeFormatNode');\n      }\n\n      dateTimePatterns = dateTimePatterns || {};\n      dateTimePatterns[dateTimeFormatLengthType] = dateTimePatterns[dateTimeFormatLengthType] || patternNodes[0].textContent;\n    });\n    return dateTimePatterns;\n  },\n\n  extractDateOrTimeFormats(localeId, calendarId, dateOrTime) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let formats;\n    finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/\" + dateOrTime + 'Formats/' + dateOrTime + 'FormatLength/' + dateOrTime + 'Format/*').forEach(patternNode => {\n      const type = patternNode.parentNode.parentNode.getAttribute('type');\n      formats = formats || {};\n      formats[type] = formats[type] || patternNode.textContent;\n    });\n    return formats;\n  },\n\n  extractDateFormats(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    return this.extractDateOrTimeFormats(localeId, calendarId, 'date');\n  },\n\n  extractTimeFormats(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    return this.extractDateOrTimeFormats(localeId, calendarId, 'time');\n  },\n\n  extractDateFormatItems(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let dateFormatItems;\n    finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/dateTimeFormats/availableFormats/dateFormatItem\").forEach(dateFormatItemNode => {\n      const id = dateFormatItemNode.getAttribute('id');\n      dateFormatItems = dateFormatItems || {};\n      dateFormatItems[id] = dateFormatItems[id] || dateFormatItemNode.textContent;\n    });\n    return dateFormatItems;\n  },\n\n  extractDateIntervalFormats(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let dateIntervalFormats;\n    finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/dateTimeFormats/intervalFormats/intervalFormatItem\").forEach(intervalFormatItemNode => {\n      const dateIntervalFormat = {};\n\n      for (let i = 0; i < intervalFormatItemNode.childNodes.length; i += 1) {\n        const greatestDifferenceNode = intervalFormatItemNode.childNodes[i];\n\n        if (greatestDifferenceNode.nodeType !== 1) {\n          // Skip whitespace node\n          continue;\n        }\n\n        const greatestDifferenceIdAttribute = greatestDifferenceNode.getAttribute('id');\n        const greatestDifferenceId = greatestDifferenceIdAttribute;\n        dateIntervalFormat[greatestDifferenceId] = dateIntervalFormat[greatestDifferenceId] || greatestDifferenceNode.textContent;\n      }\n\n      const id = intervalFormatItemNode.getAttribute('id');\n      dateIntervalFormats = dateIntervalFormats || {};\n      dateIntervalFormats[id] = dateIntervalFormats[id] || dateIntervalFormat;\n    });\n    return dateIntervalFormats;\n  },\n\n  extractDateIntervalFallbackFormat(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let dateIntervalFallbackFormat;\n    finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/dateTimeFormats/intervalFormats/intervalFormatFallback\").forEach(intervalFormatFallbackNode => {\n      dateIntervalFallbackFormat = dateIntervalFallbackFormat || intervalFormatFallbackNode.textContent;\n    });\n    return dateIntervalFallbackFormat;\n  },\n\n  // Number extraction code:\n  extractNumberSymbols(localeId, numberSystemId) {\n    this.checkValidLocaleId(localeId);\n    numberSystemId = numberSystemId || 'latn';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let numberSymbols;\n    finder(\"/ldml/numbers/symbols[@numberSystem = '\" + numberSystemId + \"']/*[name() != 'alias']\").concat(finder(\"/ldml/numbers/symbols/*[name() != 'alias']\")).forEach(numberSymbolNode => {\n      const symbolId = numberSymbolNode.nodeName;\n      numberSymbols = numberSymbols || {};\n      numberSymbols[symbolId] = numberSymbols[symbolId] || numberSymbolNode.textContent;\n    });\n    return numberSymbols;\n  },\n\n  extractNumberFormats(localeId, numberSystemId) {\n    this.checkValidLocaleId(localeId);\n    numberSystemId = numberSystemId || 'latn';\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let numberFormats;\n    ['scientific', 'decimal', 'currency', 'percent'].forEach(formatType => {\n      ['full', 'long', 'medium', 'short'].forEach(length => {\n        finder('/ldml/numbers/' + formatType + \"Formats[@numberSystem = '\" + numberSystemId + \"']/\" + formatType + \"FormatLength[@type='\" + length + \"']/\" + formatType + 'Format/pattern').forEach(patternNode => {\n          const type = patternNode.getAttribute('type');\n          const count = patternNode.getAttribute('count');\n          numberFormats = numberFormats || {};\n          numberFormats[formatType] = numberFormats[formatType] || {};\n          numberFormats[formatType][length] = numberFormats[formatType][length] || {};\n          numberFormats[formatType][length][type] = numberFormats[formatType][length][type] || {};\n          numberFormats[formatType][length][type][count] = numberFormats[formatType][length][type][count] || patternNode.textContent;\n        });\n      });\n      finder('/ldml/numbers/' + formatType + \"Formats[@numberSystem = '\" + numberSystemId + \"']/\" + formatType + 'FormatLength[not(@type)]/' + formatType + 'Format/pattern').forEach(patternNode => {\n        numberFormats = numberFormats || {};\n        numberFormats[formatType] = numberFormats[formatType] || {};\n        numberFormats[formatType].default = numberFormats[formatType].default || patternNode.textContent;\n      });\n      finder('/ldml/numbers/' + formatType + \"Formats[@numberSystem = '\" + numberSystemId + \"']/unitPattern\").forEach(unitPatternNode => {\n        const count = unitPatternNode.getAttribute('count');\n        numberFormats = numberFormats || {};\n        numberFormats[formatType] = numberFormats[formatType] || {};\n        numberFormats[formatType][count] = numberFormats[formatType][count] || unitPatternNode.textContent;\n      });\n    });\n    finder(\"/ldml/numbers/currencyFormats[@numberSystem = '\" + numberSystemId + \"']/currencySpacing\").forEach(currencySpacingNode => {\n      numberFormats = numberFormats || {};\n      numberFormats.currency = numberFormats.currency || {};\n      numberFormats.currency.currencySpacing = numberFormats.currency.currencySpacing || {};\n      ['before', 'after'].forEach(place => {\n        const placeData = numberFormats.currency.currencySpacing[place + 'Currency'] = numberFormats.currency.currencySpacing[place + 'Currency'] || {};\n        ['currencyMatch', 'surroundingMatch', 'insertBetween'].forEach(spacingPropertyName => {\n          const match = xpath.select(place + 'Currency/' + spacingPropertyName, currencySpacingNode);\n\n          if (match.length > 0) {\n            numberFormats.currency.currencySpacing[place + 'Currency'][spacingPropertyName] = match[0].textContent;\n          }\n        });\n        ['currencyMatch', 'surroundingMatch'].forEach(spacingPropertyName => {\n          if (placeData[spacingPropertyName]) {\n            placeData[spacingPropertyName] = unicoderegexp.expandCldrUnicodeSetIdToCharacterClass(placeData[spacingPropertyName]);\n          }\n        });\n      });\n    });\n    return numberFormats;\n  },\n\n  extractDefaultNumberSystemId(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    let defaultNumberSystemId;\n    finder('/ldml/numbers/defaultNumberingSystem').forEach(defaultNumberingSystemNode => {\n      defaultNumberSystemId = defaultNumberSystemId || defaultNumberingSystemNode.textContent;\n    });\n    return defaultNumberSystemId;\n  },\n\n  extractUnitPatterns(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const unitPatterns = {};\n    finder('/ldml/units/unitLength/unit/unitPattern').forEach(unitPatternNode => {\n      const unitNode = unitPatternNode.parentNode;\n      const unitLength = unitNode.parentNode.getAttribute('type');\n      const unitId = normalizeProperty(unitNode.getAttribute('type'));\n      unitPatterns[unitLength] = unitPatterns[unitLength] || {};\n      unitPatterns[unitLength].unit = unitPatterns[unitLength].unit || {};\n      unitPatterns[unitLength].unit[unitId] = unitPatterns[unitLength].unit[unitId] || {};\n      const count = unitPatternNode.getAttribute('count');\n      unitPatterns[unitLength].unit[unitId][count] = unitPatterns[unitLength].unit[unitId][count] || unitPatternNode.textContent;\n    });\n    finder('/ldml/units/unitLength/compoundUnit/compoundUnitPattern').forEach(compoundUnitPatternNode => {\n      const compoundUnitNode = compoundUnitPatternNode.parentNode;\n      const unitLength = compoundUnitNode.parentNode.getAttribute('type');\n      const compoundUnitId = compoundUnitNode.getAttribute('type');\n      unitPatterns[unitLength].compoundUnit = unitPatterns[unitLength].compoundUnit || {};\n      unitPatterns[unitLength].compoundUnit[compoundUnitId] = compoundUnitPatternNode.textContent;\n    });\n    return unitPatterns;\n  },\n\n  extractDelimiters(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const delimiters = {};\n    finder('/ldml/delimiters/*').forEach(delimiterNode => {\n      const type = delimiterNode.nodeName;\n      delimiters[type] = delimiters[type] || delimiterNode.textContent;\n    });\n    return delimiters;\n  },\n\n  extractListPatterns(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const listPatterns = {};\n    finder('/ldml/listPatterns/listPattern/listPatternPart').forEach(listPatternPartNode => {\n      const listPatternTypeAttribute = listPatternPartNode.parentNode.getAttribute('type');\n      const type = listPatternTypeAttribute ? normalizeProperty(listPatternTypeAttribute) : 'default';\n      const part = listPatternPartNode.getAttribute('type');\n      listPatterns[type] = listPatterns[type] || {};\n      listPatterns[type][part] = listPatterns[type][part] || listPatternPartNode.textContent;\n    });\n    return listPatterns;\n  },\n\n  extractCharacters(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const characters = {\n      exemplar: {},\n      ellipsis: {}\n    };\n    finder('/ldml/characters/exemplarCharacters').forEach(exemplarCharactersNode => {\n      const typeAttr = exemplarCharactersNode.getAttribute('type');\n      const type = typeAttr || 'default';\n      characters.exemplar[type] = characters.exemplar[type] || exemplarCharactersNode.textContent.replace(/^\\[|\\]$/g, '').split(' ');\n    });\n    finder('/ldml/characters/ellipsis').forEach(ellipsisNode => {\n      const type = ellipsisNode.getAttribute('type');\n      characters.ellipsis[type] = characters.ellipsis[type] || ellipsisNode.textContent;\n    });\n    finder('/ldml/characters/moreInformation').forEach(moreInformationNode => {\n      characters.moreInformation = characters.moreInformation || moreInformationNode.textContent;\n    });\n    return characters;\n  },\n\n  /**\n   * @param {string} localeId\n   * @param {string} cardinalOrOrdinal - 'cardinal' or 'ordinal'\n   * @returns {CldrPluralRuleSet} A set of plural rules\n   */\n  _extractPluralRules(localeId, cardinalOrOrdinal) {\n    this.checkValidLocaleId(localeId);\n    const that = this;\n    const document = that.getDocument(Path.resolve(that.cldrPath, 'common', 'supplemental', cardinalOrOrdinal === 'ordinal' ? 'ordinals.xml' : 'plurals.xml'));\n    const subLocaleIds = that.expandLocaleIdToPrioritizedList(localeId);\n    let pluralRules = new CldrPluralRuleSet();\n\n    for (let i = 0; i < subLocaleIds.length; i += 1) {\n      const subLocaleId = subLocaleIds[i];\n      const matchLocalesXPathExpr = \"@locales = '\" + subLocaleId + \"' or \" + \"starts-with(@locales, '\" + subLocaleId + \"') or \" + \"contains(@locales, ' \" + subLocaleId + \" ') or \" + \"substring(@locales, string-length(@locales) - string-length(' \" + subLocaleId + \"') + 1) = ' \" + subLocaleId + \"'\";\n      const pluralRulesNodes = xpath.select('/supplementalData/plurals/pluralRules[' + matchLocalesXPathExpr + ']', document);\n      const cldrPluralRuleSet = new CldrPluralRuleSet();\n\n      if (pluralRulesNodes.length > 0) {\n        xpath.select('pluralRule', pluralRulesNodes[0]).forEach(pluralRuleNode => {\n          cldrPluralRuleSet.addRule(pluralRuleNode.textContent, pluralRuleNode.getAttribute('count'));\n        });\n        pluralRules = cldrPluralRuleSet;\n        break;\n      }\n    }\n\n    return pluralRules;\n  },\n\n  _extractPluralRuleAst(localeId, cardinalOrOrdinal) {\n    this.checkValidLocaleId(localeId);\n    return this._extractPluralRules(localeId, cardinalOrOrdinal).toJavaScriptFunctionBodyAst();\n  },\n\n  extractPluralClasses(localeId, cardinalOrOrdinal) {\n    this.checkValidLocaleId(localeId);\n    return this._extractPluralRules(localeId, cardinalOrOrdinal).availablePluralClasses();\n  },\n\n  extractPluralRuleFunction(localeId, cardinalOrOrdinal) {\n    this.checkValidLocaleId(localeId); // eslint-disable-next-line no-new-func\n\n    return new Function('val', escodegen.generate({\n      type: 'Program',\n      body: this._extractPluralRuleAst(localeId, cardinalOrOrdinal)\n    }));\n  },\n\n  // 'types' is optional, defaults to all available\n  extractRbnfFunctionByType(localeId, types) {\n    this.checkValidLocaleId(localeId);\n\n    const cardinalPluralRuleAst = this._extractPluralRuleAst(localeId, 'cardinal');\n\n    const ordinalPluralRuleAst = this._extractPluralRuleAst(localeId, 'ordinal');\n\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'rbnf'));\n    const cldrRbnfRuleSetByType = {};\n\n    for (const rbnfRuleNode of finder('/ldml/rbnf/rulesetGrouping/ruleset/rbnfrule')) {\n      const type = CldrRbnfRuleSet.getSafeRendererName(rbnfRuleNode.parentNode.getAttribute('type'));\n      const value = rbnfRuleNode.getAttribute('value');\n      cldrRbnfRuleSetByType[type] = cldrRbnfRuleSetByType[type] || new CldrRbnfRuleSet({\n        type,\n        cardinalPluralRuleAst,\n        ordinalPluralRuleAst\n      });\n\n      if (!cldrRbnfRuleSetByType[type].ruleByValue[value]) {\n        const radixAttribute = rbnfRuleNode.getAttribute('radix');\n        cldrRbnfRuleSetByType[type].ruleByValue[value] = {\n          value,\n          rbnf: rbnfRuleNode.textContent.replace(/;$/, '').replace(/←/g, '<').replace(/→/g, '>'),\n          radix: radixAttribute\n        };\n      }\n    }\n\n    const isAddedByType = {};\n    const typesToAdd = types ? [].concat(types) : Object.keys(cldrRbnfRuleSetByType);\n    const defaultNumberingSystem = this.extractDefaultNumberSystemId(localeId);\n    const numberingSystem = this.extractNumberingSystem(defaultNumberingSystem);\n\n    if (numberingSystem.type === 'algorithmic') {\n      typesToAdd.push(numberingSystem.rules);\n    }\n\n    const zeroCharCode = '0'.charCodeAt(0);\n    const rbnfFunctionByType = {\n      // Provide a (bad) default number rendering implementation to avoid #13\n      renderNumber(number) {\n        if (numberingSystem.type === 'numeric') {\n          return String(number).split(/(?:)/).map(ch => {\n            return numberingSystem.digits[ch.charCodeAt(0) - zeroCharCode] || ch;\n          }).join('');\n        } else {\n          // numberingSystem.type === 'algorithmic'\n          return this[numberingSystem.rules](number);\n        }\n      }\n\n    };\n\n    while (typesToAdd.length > 0) {\n      const type = typesToAdd.shift();\n\n      if (!(type in isAddedByType)) {\n        isAddedByType[type] = true;\n        const cldrRbnfRuleSet = cldrRbnfRuleSetByType[type]; // Some rules aren't available in some locales (such as spellout-cardinal-financial).\n        // The easiest thing is just to skip the missing ones here, even though it can produce\n        // some broken function sets:\n\n        if (cldrRbnfRuleSet) {\n          const result = cldrRbnfRuleSet.toFunctionAst(); // eslint-disable-next-line no-new-func\n\n          rbnfFunctionByType[type] = new Function('n', escodegen.generate({\n            type: 'Program',\n            body: result.functionAst.body.body\n          }));\n          Array.prototype.push.apply(typesToAdd, result.dependencies);\n        }\n      }\n    }\n\n    return rbnfFunctionByType;\n  },\n\n  extractNumberingSystem(numberingSystemId) {\n    const document = this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'numberingSystems.xml'));\n    const numberingSystemNode = xpath.select1(`/supplementalData/numberingSystems/numberingSystem[@id=\"${numberingSystemId}\"]`, document);\n\n    if (!numberingSystemNode) {\n      throw new Error(`Unknown numbering system: ${numberingSystemId}`);\n    }\n\n    const type = numberingSystemNode.getAttribute('type');\n    const numberingSystem = {\n      type\n    };\n\n    if (type === 'numeric') {\n      numberingSystem.digits = numberingSystemNode.getAttribute('digits').split(/(?:)/u);\n    } else {\n      // type='algorithmic'\n      const rulesAttributeFragments = numberingSystemNode.getAttribute('rules').split('/');\n      numberingSystem.rules = CldrRbnfRuleSet.getSafeRendererName(rulesAttributeFragments[rulesAttributeFragments.length - 1]);\n\n      if (rulesAttributeFragments.length > 1) {\n        // Eg. [ \"zh\", \"SpelloutRules\", \"spellout-numbering-days\" ]\n        numberingSystem.locale = rulesAttributeFragments[0];\n      }\n    }\n\n    return numberingSystem;\n  },\n\n  // Deprecated\n  extractDigitsByNumberSystemId() {\n    const document = this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'numberingSystems.xml'));\n    const digitsByNumberSystemId = {};\n    xpath.select('/supplementalData/numberingSystems/numberingSystem', document).forEach(numberingSystemNode => {\n      const numberSystemId = numberingSystemNode.getAttribute('id');\n\n      if (numberingSystemNode.getAttribute('type') === 'numeric') {\n        digitsByNumberSystemId[numberSystemId] = numberingSystemNode.getAttribute('digits').split(/(?:)/u);\n      } else {\n        // type='algorithmic'\n        const rulesAttributeFragments = numberingSystemNode.getAttribute('rules').split('/');\n        const ruleType = CldrRbnfRuleSet.getSafeRendererName(rulesAttributeFragments[rulesAttributeFragments.length - 1]);\n        digitsByNumberSystemId[numberSystemId] = ruleType; // A string value means \"use this rbnf renderer for the digits\"\n      }\n    }, this);\n    return digitsByNumberSystemId;\n  },\n\n  extractLayout(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main'));\n    const layout = {};\n\n    for (const leafNode of finder('/ldml/layout/*/*')) {\n      const type = leafNode.nodeName;\n      const parentType = leafNode.parentNode.nodeName;\n      layout[parentType] = layout[parentType] || {};\n      layout[parentType][type] = layout[parentType][type] || leafNode.textContent;\n    }\n\n    return layout;\n  },\n\n  extractTerritories() {\n    const finder = this.createFinder([this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'supplementalData.xml'))]);\n    const territoryInfoByTerritoryId = {};\n\n    for (const territoryCodeNode of finder('/supplementalData/codeMappings/territoryCodes')) {\n      const type = territoryCodeNode.getAttribute('type');\n      const numericCode = territoryCodeNode.getAttribute('numeric');\n      const alpha3Code = territoryCodeNode.getAttribute('alpha3');\n      const countryInfo = {\n        alpha2Code: type // ISO 3166-1 alpha-2\n\n      };\n\n      if (alpha3Code) {\n        // ISO 3166-1 alpha-3\n        countryInfo.alpha3Code = alpha3Code;\n      }\n\n      if (numericCode) {\n        // UN M.49 / ISO-3166-1 numeric-3\n        // A numeric code may be reused by another country, e.g. Zaire and the DRC both have numeric code 180, but only the DRC currently exists\n        // Entries without a numeric code are few, which are usually exceptional reservations in ISO 3166-1 alpha-2. Example: IC, Canary Islands\n        countryInfo.numericCode = numericCode;\n      }\n\n      territoryInfoByTerritoryId[type] = countryInfo;\n    }\n\n    return territoryInfoByTerritoryId;\n  },\n\n  extractTerritoryInfo() {\n    const finder = this.createFinder([this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'supplementalData.xml'))]);\n    const territoryInfoByTerritoryId = {};\n\n    for (const territoryNode of finder('/supplementalData/territoryInfo/territory')) {\n      const territoryId = territoryNode.getAttribute('type');\n      territoryInfoByTerritoryId[territoryId] = {\n        id: territoryId,\n        gdp: parseInt(territoryNode.getAttribute('gdp'), 10),\n        literacyPercent: parseFloat(territoryNode.getAttribute('literacyPercent')),\n        population: parseInt(territoryNode.getAttribute('population'), 10),\n        languages: []\n      };\n    }\n\n    for (const languagePopulationNode of finder('/supplementalData/territoryInfo/territory/languagePopulation')) {\n      const territoryId = languagePopulationNode.parentNode.getAttribute('type');\n      const languageInfo = {\n        id: languagePopulationNode.getAttribute('type'),\n        populationPercent: parseFloat(languagePopulationNode.getAttribute('populationPercent'))\n      };\n      const officialStatus = languagePopulationNode.getAttribute('officialStatus');\n\n      if (officialStatus) {\n        languageInfo.officialStatus = officialStatus;\n      }\n\n      const writingPercent = languagePopulationNode.getAttribute('writingPercent');\n\n      if (writingPercent) {\n        languageInfo.writingPercent = parseFloat(writingPercent);\n      }\n\n      territoryInfoByTerritoryId[territoryId].languages.push(languageInfo);\n    }\n\n    return territoryInfoByTerritoryId;\n  },\n\n  extractTerritoryContainmentGroups() {\n    const finder = this.createFinder([this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'supplementalData.xml'))]);\n    const territoryContainmentGroups = {};\n    const isSeenByType = {};\n    const parentRegionIdByType = {};\n\n    for (const groupNode of finder('/supplementalData/territoryContainment/group')) {\n      const type = groupNode.getAttribute('type');\n      const contains = groupNode.getAttribute('contains').split(' ');\n\n      if (!isSeenByType[type]) {\n        // Only look at the first occurence of a 'type', the first one overrides any items after it with the same type\n        isSeenByType[type] = true;\n        territoryContainmentGroups[type] = {\n          type,\n          contains\n        };\n        contains.forEach(id => {\n          parentRegionIdByType[id] = type;\n        });\n      }\n    }\n\n    for (const type of Object.keys(territoryContainmentGroups)) {\n      // Territory containment groups that are not themselves somehow linked to the root world group '001', are not exposed because they're not part of the tree structure\n      if (!(type in parentRegionIdByType)) {\n        if (type !== '001') {\n          delete territoryContainmentGroups[type];\n        }\n      } else {\n        territoryContainmentGroups[type].parent = parentRegionIdByType[type];\n      }\n    }\n\n    return territoryContainmentGroups;\n  },\n\n  extractSubdivisionContainmentGroups() {\n    const finder = this.createFinder([this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'subdivisions.xml'))]);\n    const subdivisionContainmentGroups = {};\n    const parentRegionIdByType = {};\n\n    for (const groupNode of finder('/supplementalData/subdivisionContainment/subgroup')) {\n      const type = groupNode.getAttribute('type');\n      const contains = groupNode.getAttribute('contains').split(' ');\n      subdivisionContainmentGroups[type] = {\n        type,\n        contains\n      };\n\n      for (const id of contains) {\n        parentRegionIdByType[id] = type;\n      }\n    }\n\n    for (const type of Object.keys(subdivisionContainmentGroups)) {\n      if (typeof parentRegionIdByType[type] !== 'undefined') {\n        subdivisionContainmentGroups[type].parent = parentRegionIdByType[type];\n      }\n    }\n\n    return subdivisionContainmentGroups;\n  },\n\n  extractLanguageSupplementalData() {\n    const finder = this.createFinder([this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'supplementalData.xml'))]);\n    const languageData = {};\n\n    for (const languageNode of finder('/supplementalData/languageData/language')) {\n      const type = languageNode.getAttribute('type');\n      const isSecondary = languageNode.getAttribute('alt') === 'secondary';\n      let record;\n\n      if (!languageData[type]) {\n        languageData[type] = record = {};\n      }\n\n      if (isSecondary) {\n        languageData[type].secondary = record = {};\n      }\n\n      const scriptsAttr = languageNode.getAttribute('scripts');\n\n      if (scriptsAttr) {\n        record.scripts = scriptsAttr.split(' ');\n      }\n\n      const territoriesAttr = languageNode.getAttribute('territories');\n\n      if (territoriesAttr) {\n        record.territories = territoriesAttr.split(' ');\n      }\n    }\n\n    return languageData;\n  },\n\n  extractLanguageSupplementalMetadata() {\n    const finder = this.createFinder([this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'supplementalMetadata.xml'))]);\n    const languageData = {};\n\n    for (const languageAliasNode of finder('/supplementalData/metadata/alias/languageAlias')) {\n      const type = languageAliasNode.getAttribute('type');\n      languageData[type] = {\n        replacement: languageAliasNode.getAttribute('replacement'),\n        reason: languageAliasNode.getAttribute('reason')\n      };\n    }\n\n    return languageData;\n  },\n\n  /**\n   * Weekdata contains various week related info, grouped by territory or locale\n   * Defaults are indicated by territory=\"001\" or locale=\"und\"\n   *\n   * https://www.unicode.org/reports/tr35/tr35-55/tr35-dates.html#Week_Data\n   */\n  extractWeekData() {\n    const finder = this.createFinder([this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'supplementalData.xml'))]);\n    const weekData = {\n      minDays: [],\n      firstDay: [],\n      weekendStart: [],\n      weekendEnd: [],\n      weekOfPreference: []\n    };\n\n    for (const minDaysNode of finder('/supplementalData/weekData/minDays')) {\n      const territories = minDaysNode.getAttribute('territories').split(/\\s+/).filter(x => x);\n      const count = minDaysNode.getAttribute('count');\n      weekData.minDays.push({\n        territories,\n        count\n      });\n    }\n\n    for (const firstDayNode of finder('/supplementalData/weekData/firstDay')) {\n      const territories = firstDayNode.getAttribute('territories').split(/\\s+/).filter(x => x);\n      const day = firstDayNode.getAttribute('day');\n      const alt = firstDayNode.getAttribute('alt');\n      weekData.firstDay.push({\n        territories,\n        day,\n        variant: alt === 'variant'\n      });\n    }\n\n    for (const weekendStartNode of finder('/supplementalData/weekData/weekendStart')) {\n      const territories = weekendStartNode.getAttribute('territories').split(/\\s+/).filter(x => x);\n      const day = weekendStartNode.getAttribute('day');\n      weekData.weekendStart.push({\n        territories,\n        day\n      });\n    }\n\n    for (const weekendEndNode of finder('/supplementalData/weekData/weekendEnd')) {\n      const territories = weekendEndNode.getAttribute('territories').split(/\\s+/).filter(x => x);\n      const day = weekendEndNode.getAttribute('day');\n      weekData.weekendEnd.push({\n        territories,\n        day\n      });\n    }\n\n    for (const weekOfPreferenceNode of finder('/supplementalData/weekData/weekOfPreference')) {\n      const locales = weekOfPreferenceNode.getAttribute('locales').split(/\\s+/);\n      const ordering = weekOfPreferenceNode.getAttribute('ordering');\n      weekData.weekOfPreference.push({\n        locales,\n        ordering\n      });\n    }\n\n    return weekData;\n  },\n\n  extractTextToSpeechCharacterLabels(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'annotations'));\n    const characterLabels = {};\n\n    for (const node of finder('/ldml/annotations/annotation[@type=\"tts\"]')) {\n      characterLabels[node.getAttribute('cp')] = characterLabels[node.getAttribute('cp')] || node.textContent;\n    }\n\n    return characterLabels;\n  },\n\n  extractDerivedTextToSpeechCharacterLabels(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'annotationsDerived'));\n    const characterLabels = {};\n\n    for (const node of finder('/ldml/annotations/annotation[@type=\"tts\"]')) {\n      characterLabels[node.getAttribute('cp')] = characterLabels[node.getAttribute('cp')] || node.textContent;\n    }\n\n    return characterLabels;\n  },\n\n  extractAllTextToSpeechCharacterLabels(localeId) {\n    return { ...this.extractDerivedTextToSpeechCharacterLabels(localeId),\n      ...this.extractTextToSpeechCharacterLabels(localeId)\n    };\n  }\n\n};\nmodule.exports = new Cldr(Path.resolve(__dirname, '../3rdparty/cldr/'));\n\nmodule.exports.load = cldrPath => new Cldr(cldrPath);","map":{"version":3,"sources":["C:/Users/crisl/OneDrive/Escritorio/app/traductorApp/node_modules/cldr/lib/cldr.js"],"names":["Path","require","fs","passError","memoizeAsync","DOMParser","xpath","seq","normalizeLocaleId","normalizeProperty","convertObjectsWithIntegerKeysToArrays","CldrPluralRuleSet","CldrRbnfRuleSet","escodegen","unicoderegexp","normalizeXPathQuery","xpathQuery","xpathQueryFragments","split","i","length","splice","join","Cldr","cldrPath","documentByFileName","memoizerByFileName","prototype","fileNamesByTypeAndNormalizedLocaleId","type","_fileNamesByTypeAndNormalizedLocaleId","fileNames","readdirSync","resolve","e","code","forEach","fileName","matchFileName","match","localeIds","_localeIds","Object","keys","localeIdsSet","_localeIdsSet","Set","checkValidLocaleId","localeId","has","Error","calendarIds","_calendarIds","select","getDocument","keyNode","calendarId","getAttribute","push","numberSystemIds","_numberSystemIds","localesByParentLocale","_localesByParentLocale","parentLocaleNode","map","windowsZonesByMapZone","_windowsZonesByMapZone","typeEntry","name","territory","timeZone","cb","that","process","nextTick","readFile","xmlString","document","parseFromString","readFileSync","resolveParentLocaleId","parentLocaleId","_parentLocaleId","indexOf","test","replace","extractWindowsZonesByTimeZone","filter","element","toLowerCase","extractWindowsZonesByName","expandLocaleIdToPrioritizedList","getPrioritizedDocumentsForLocale","concat","subLocaleId","preload","Array","isArray","neededLocaleById","root","parEach","catch","createFinder","prioritizedDocuments","finder","prioritizedResults","resultsForLocaleDocument","queryFragments","poppedQueryFragments","aliasNodes","aliasSpecifiedQuery","apply","unshift","pop","extractLocaleDisplayPattern","localeDisplayPattern","node","nodeName","textContent","extractLanguageDisplayNames","languageDisplayNames","id","extractTimeZoneDisplayNames","timeZoneDisplayNames","zoneNode","timeZoneId","exemplarCityNodes","tzNameLocale","genericDisplayNameNodes","longDisplayNameNodes","extractTimeZoneFormats","timeZoneFormats","tagName","formatName","value","regions","extractTerritoryDisplayNames","territoryDisplayNames","territoryNode","territoryId","alternative","extractSubdivisionDisplayNames","subdivisionDisplayNames","subdivisionId","extractSubdivisionAliases","aliasData","subdivisionAliasNode","replacement","reason","extractTerritoryAliases","territoryAliasNode","extractCurrencyInfoById","currencyDisplayNameByCurrencyId","currencyDisplayNameByCurrencyIdAndCount","currencySymbolByCurrencyId","displayNameNode","currencyId","parentNode","countAttribute","symbolNode","currencyInfoById","assign","displayName","symbol","extractScriptDisplayNames","scriptDisplayNames","scriptNode","extractVariantDisplayNames","variantDisplayNames","variantNode","extractKeyTypes","keyTypes","typeNode","key","types","extractMeasurementSystemNames","measurementSystemNames","measurementSystemNameNode","extractCodePatterns","codePatterns","codePatternNode","extractEraNames","eraNames","eraType","typeInOutput","eraAbbr","eraNode","parseInt","extractQuarterNames","quarterNames","quarterContext","quarterContextCamelCase","quarterWidth","quarterNode","quarterNo","extractDayPeriods","dayPeriods","dayPeriodContext","dayPeriodContextCamelCase","dayPeriodWidth","dayPeriodNode","extractCyclicNames","cyclicNames","cyclicNameSet","cyclicNameContext","cyclicNameWidth","cyclicNameNode","extractMonthNames","monthNames","monthContext","monthContextCamelCase","monthWidth","monthNode","monthNo","extractMonthPatterns","monthPatterns","monthPatternContext","monthPatternContextCamelCase","monthPatternWidth","monthPatternNode","extractDayNames","dayNoByCldrId","sun","mon","tue","wed","thu","fri","sat","dayNames","dayContext","dayContextCamelCase","dayWidth","dayNode","dayNo","extractFields","fields","fieldDisplayNameNode","fieldName","fieldRelativeNode","relative","relativeTimePatternNode","relativeTimeNode","count","relativeTime","extractDateTimePatterns","dateTimePatterns","dateTimeFormatNode","dateTimeFormatLengthType","patternNodes","extractDateOrTimeFormats","dateOrTime","formats","patternNode","extractDateFormats","extractTimeFormats","extractDateFormatItems","dateFormatItems","dateFormatItemNode","extractDateIntervalFormats","dateIntervalFormats","intervalFormatItemNode","dateIntervalFormat","childNodes","greatestDifferenceNode","nodeType","greatestDifferenceIdAttribute","greatestDifferenceId","extractDateIntervalFallbackFormat","dateIntervalFallbackFormat","intervalFormatFallbackNode","extractNumberSymbols","numberSystemId","numberSymbols","numberSymbolNode","symbolId","extractNumberFormats","numberFormats","formatType","default","unitPatternNode","currencySpacingNode","currency","currencySpacing","place","placeData","spacingPropertyName","expandCldrUnicodeSetIdToCharacterClass","extractDefaultNumberSystemId","defaultNumberSystemId","defaultNumberingSystemNode","extractUnitPatterns","unitPatterns","unitNode","unitLength","unitId","unit","compoundUnitPatternNode","compoundUnitNode","compoundUnitId","compoundUnit","extractDelimiters","delimiters","delimiterNode","extractListPatterns","listPatterns","listPatternPartNode","listPatternTypeAttribute","part","extractCharacters","characters","exemplar","ellipsis","exemplarCharactersNode","typeAttr","ellipsisNode","moreInformationNode","moreInformation","_extractPluralRules","cardinalOrOrdinal","subLocaleIds","pluralRules","matchLocalesXPathExpr","pluralRulesNodes","cldrPluralRuleSet","pluralRuleNode","addRule","_extractPluralRuleAst","toJavaScriptFunctionBodyAst","extractPluralClasses","availablePluralClasses","extractPluralRuleFunction","Function","generate","body","extractRbnfFunctionByType","cardinalPluralRuleAst","ordinalPluralRuleAst","cldrRbnfRuleSetByType","rbnfRuleNode","getSafeRendererName","ruleByValue","radixAttribute","rbnf","radix","isAddedByType","typesToAdd","defaultNumberingSystem","numberingSystem","extractNumberingSystem","rules","zeroCharCode","charCodeAt","rbnfFunctionByType","renderNumber","number","String","ch","digits","shift","cldrRbnfRuleSet","result","toFunctionAst","functionAst","dependencies","numberingSystemId","numberingSystemNode","select1","rulesAttributeFragments","locale","extractDigitsByNumberSystemId","digitsByNumberSystemId","ruleType","extractLayout","layout","leafNode","parentType","extractTerritories","territoryInfoByTerritoryId","territoryCodeNode","numericCode","alpha3Code","countryInfo","alpha2Code","extractTerritoryInfo","gdp","literacyPercent","parseFloat","population","languages","languagePopulationNode","languageInfo","populationPercent","officialStatus","writingPercent","extractTerritoryContainmentGroups","territoryContainmentGroups","isSeenByType","parentRegionIdByType","groupNode","contains","parent","extractSubdivisionContainmentGroups","subdivisionContainmentGroups","extractLanguageSupplementalData","languageData","languageNode","isSecondary","record","secondary","scriptsAttr","scripts","territoriesAttr","territories","extractLanguageSupplementalMetadata","languageAliasNode","extractWeekData","weekData","minDays","firstDay","weekendStart","weekendEnd","weekOfPreference","minDaysNode","x","firstDayNode","day","alt","variant","weekendStartNode","weekendEndNode","weekOfPreferenceNode","locales","ordering","extractTextToSpeechCharacterLabels","characterLabels","extractDerivedTextToSpeechCharacterLabels","extractAllTextToSpeechCharacterLabels","module","exports","__dirname","load"],"mappings":"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","sourcesContent":["const Path = require('path');\nconst fs = require('fs');\nconst passError = require('passerror');\nconst memoizeAsync = require('memoizeasync');\nconst DOMParser = require('@xmldom/xmldom').DOMParser;\nconst xpath = require('xpath');\nconst seq = require('seq');\nconst normalizeLocaleId = require('./normalizeLocaleId');\nconst normalizeProperty = require('./normalizeProperty');\nconst convertObjectsWithIntegerKeysToArrays = require('./convertObjectsWithIntegerKeysToArrays');\nconst CldrPluralRuleSet = require('./CldrPluralRuleSet');\nconst CldrRbnfRuleSet = require('./CldrRbnfRuleSet');\nconst escodegen = require('escodegen');\nconst unicoderegexp = require('unicoderegexp');\n\nfunction normalizeXPathQuery(xpathQuery) {\n  const xpathQueryFragments = xpathQuery.split('/');\n  for (let i = 0; i < xpathQueryFragments.length; i += 1) {\n    if (\n      i > 0 &&\n      xpathQueryFragments[i] === '..' &&\n      xpathQueryFragments[i - 1] !== '..'\n    ) {\n      xpathQueryFragments.splice(i - 1, 2);\n      i -= 2;\n    }\n  }\n  return xpathQueryFragments.join('/');\n}\n\nfunction Cldr(cldrPath) {\n  // Support instantiation without the 'new' operator:\n  if (!(this instanceof Cldr)) {\n    return new Cldr(cldrPath);\n  }\n  this.cldrPath = cldrPath;\n  this.documentByFileName = {};\n  this.memoizerByFileName = {};\n}\n\nCldr.prototype = {\n  fileNamesByTypeAndNormalizedLocaleId(type = 'main') {\n    if (!this._fileNamesByTypeAndNormalizedLocaleId) {\n      this._fileNamesByTypeAndNormalizedLocaleId = {};\n    }\n    if (\n      typeof this._fileNamesByTypeAndNormalizedLocaleId[type] === 'undefined'\n    ) {\n      this._fileNamesByTypeAndNormalizedLocaleId[type] = {};\n      let fileNames;\n      try {\n        fileNames = fs.readdirSync(Path.resolve(this.cldrPath, 'common', type));\n      } catch (e) {\n        if (e.code === 'ENOENT') {\n          // Directory doesn't exist, just pretend it's empty.\n          return;\n        }\n      }\n      fileNames.forEach(function (fileName) {\n        const matchFileName = fileName.match(/^(.*)\\.xml$/);\n        if (matchFileName) {\n          this._fileNamesByTypeAndNormalizedLocaleId[type][\n            normalizeLocaleId(matchFileName[1])\n          ] = Path.resolve(this.cldrPath, 'common', type, fileName);\n        }\n      }, this);\n    }\n    return this._fileNamesByTypeAndNormalizedLocaleId[type];\n  },\n\n  get localeIds() {\n    if (!this._localeIds) {\n      this._localeIds = Object.keys(\n        this.fileNamesByTypeAndNormalizedLocaleId('main')\n      );\n    }\n    return this._localeIds;\n  },\n\n  get localeIdsSet() {\n    if (!this._localeIdsSet) {\n      this._localeIdsSet = new Set(this.localeIds);\n    }\n    return this._localeIdsSet;\n  },\n\n  checkValidLocaleId(localeId) {\n    if (!this.localeIdsSet.has(normalizeLocaleId(localeId))) {\n      throw new Error(`No data for locale id: ${localeId}`);\n    }\n  },\n\n  get calendarIds() {\n    if (!this._calendarIds) {\n      this._calendarIds = [];\n      xpath\n        .select(\n          '/ldmlBCP47/keyword/key[@name=\"ca\"]/type',\n          this.getDocument(\n            Path.resolve(this.cldrPath, 'common', 'bcp47', 'calendar.xml')\n          )\n        )\n        .forEach(function (keyNode) {\n          let calendarId = keyNode.getAttribute('name');\n          if (calendarId === 'gregory') {\n            calendarId = 'gregorian';\n          }\n          this._calendarIds.push(calendarId);\n        }, this);\n    }\n    return this._calendarIds;\n  },\n\n  get numberSystemIds() {\n    if (!this._numberSystemIds) {\n      this._numberSystemIds = [];\n      xpath\n        .select(\n          '/ldmlBCP47/keyword/key[@name=\"nu\"]/type',\n          this.getDocument(\n            Path.resolve(this.cldrPath, 'common', 'bcp47', 'number.xml')\n          )\n        )\n        .forEach(function (keyNode) {\n          this._numberSystemIds.push(keyNode.getAttribute('name'));\n        }, this);\n    }\n    return this._numberSystemIds;\n  },\n\n  get localesByParentLocale() {\n    if (!this._localesByParentLocale) {\n      this._localesByParentLocale = {};\n      xpath\n        .select(\n          '/supplementalData/parentLocales/parentLocale',\n          this.getDocument(\n            Path.resolve(\n              this.cldrPath,\n              'common',\n              'supplemental',\n              'supplementalData.xml'\n            )\n          )\n        )\n        .forEach(function (parentLocaleNode) {\n          this._localesByParentLocale[\n            normalizeLocaleId(parentLocaleNode.getAttribute('parent'))\n          ] = parentLocaleNode\n            .getAttribute('locales')\n            .split(' ')\n            .map((localeId) => normalizeLocaleId(localeId));\n        }, this);\n    }\n    return this._localesByParentLocale;\n  },\n\n  get windowsZonesByMapZone() {\n    if (!this._windowsZonesByMapZone) {\n      this._windowsZonesByMapZone = [];\n      xpath\n        .select(\n          '/supplementalData/windowsZones/mapTimezones/mapZone',\n          this.getDocument(\n            Path.resolve(\n              this.cldrPath,\n              'common',\n              'supplemental',\n              'windowsZones.xml'\n            )\n          )\n        )\n        .forEach(function (keyNode) {\n          keyNode\n            .getAttribute('type')\n            .split(/\\s+/)\n            .forEach(function (typeEntry) {\n              this._windowsZonesByMapZone.push({\n                name: typeEntry,\n                territory: keyNode.getAttribute('territory'),\n                timeZone: keyNode.getAttribute('other'),\n              });\n            }, this);\n        }, this);\n    }\n    return this._windowsZonesByMapZone;\n  },\n\n  // Works both async and sync (omit cb):\n  getDocument(fileName, cb) {\n    const that = this;\n    if (that.documentByFileName[fileName]) {\n      if (cb) {\n        process.nextTick(() => {\n          cb(null, that.documentByFileName[fileName]);\n        });\n      } else {\n        return that.documentByFileName[fileName];\n      }\n    } else {\n      if (cb) {\n        // Make sure not to load file more than once if it's being loaded when getDocument is called for the second time:\n        that.memoizerByFileName[fileName] =\n          that.memoizerByFileName[fileName] ||\n          memoizeAsync((cb) => {\n            fs.readFile(\n              fileName,\n              'utf-8',\n              passError(cb, (xmlString) => {\n                const document = new DOMParser().parseFromString(xmlString);\n                that.documentByFileName[fileName] = document;\n                cb(null, document);\n              })\n            );\n          });\n        that.memoizerByFileName[fileName](cb);\n      } else {\n        return (that.documentByFileName[\n          fileName\n        ] = new DOMParser().parseFromString(\n          fs.readFileSync(fileName, 'utf-8')\n        ));\n      }\n    }\n  },\n\n  resolveParentLocaleId(localeId) {\n    localeId = normalizeLocaleId(localeId);\n    if (!localeId) {\n      return;\n    }\n    let parentLocaleId;\n    Object.keys(this.localesByParentLocale).forEach(function (_parentLocaleId) {\n      if (this.localesByParentLocale[_parentLocaleId].indexOf(localeId) > -1) {\n        parentLocaleId = _parentLocaleId;\n      }\n    }, this);\n    if (!parentLocaleId && /_[^_]+$/.test(localeId)) {\n      parentLocaleId = localeId.replace(/_[^_]+$/, '');\n    }\n    return parentLocaleId;\n  },\n\n  extractWindowsZonesByTimeZone(timeZone) {\n    if (!timeZone) {\n      return;\n    }\n    return this.windowsZonesByMapZone.filter(\n      (element) => element.timeZone.toLowerCase() === timeZone.toLowerCase()\n    );\n  },\n\n  extractWindowsZonesByName(name) {\n    if (!name) {\n      return;\n    }\n    return this.windowsZonesByMapZone.filter(\n      (element) => element.name.toLowerCase() === name.toLowerCase()\n    );\n  },\n\n  expandLocaleIdToPrioritizedList(localeId) {\n    localeId = normalizeLocaleId(localeId);\n    if (!localeId) {\n      return [];\n    }\n    const localeIds = [localeId];\n    let parentLocaleId = this.resolveParentLocaleId(localeId);\n    while (parentLocaleId) {\n      localeIds.push(parentLocaleId);\n      parentLocaleId = this.resolveParentLocaleId(parentLocaleId);\n    }\n    return localeIds;\n  },\n\n  getPrioritizedDocumentsForLocale(localeId, type) {\n    this.checkValidLocaleId(localeId);\n    const that = this;\n    return that\n      .expandLocaleIdToPrioritizedList(localeId)\n      .concat('root')\n      .map(\n        (subLocaleId) =>\n          that.fileNamesByTypeAndNormalizedLocaleId(type)[\n            normalizeLocaleId(subLocaleId)\n          ]\n      )\n      .filter((fileName) => !!fileName)\n      .map((fileName) => that.getDocument(fileName));\n  },\n\n  preload(localeIds, cb) {\n    const that = this;\n    if (typeof localeIds === 'function') {\n      cb = localeIds;\n      localeIds = that.localeIds;\n    }\n    localeIds = (Array.isArray(localeIds) ? localeIds : [localeIds]).map(\n      normalizeLocaleId\n    );\n    const neededLocaleById = { root: true };\n    localeIds.forEach((localeId) => {\n      that.expandLocaleIdToPrioritizedList(localeId).forEach((subLocaleId) => {\n        neededLocaleById[subLocaleId] = true;\n      });\n    });\n    const fileNames = [\n      Path.resolve(that.cldrPath, 'common', 'supplemental', 'plurals.xml'),\n      Path.resolve(\n        that.cldrPath,\n        'common',\n        'supplemental',\n        'numberingSystems.xml'\n      ),\n    ];\n    Object.keys(neededLocaleById).forEach((localeId) => {\n      ['main', 'rbnf'].forEach((type) => {\n        const fileName = that.fileNamesByTypeAndNormalizedLocaleId(type)[\n          localeId\n        ];\n        if (fileName) {\n          fileNames.push(fileName);\n        }\n      });\n    });\n    seq(fileNames)\n      .parEach(20, function (fileName) {\n        that.getDocument(fileName, this);\n      })\n      .seq(() => {\n        cb();\n      })\n      .catch(cb);\n  },\n\n  createFinder(prioritizedDocuments) {\n    return function finder(xpathQuery) {\n      const prioritizedResults = [];\n      prioritizedDocuments.forEach((document, i) => {\n        const resultsForLocaleDocument = xpath.select(xpathQuery, document);\n        if (\n          resultsForLocaleDocument.length === 0 &&\n          i === prioritizedDocuments.length - 1\n        ) {\n          // We're in root and there were no results, look for alias elements in path:\n          const queryFragments = xpathQuery.split('/');\n\n          const poppedQueryFragments = [];\n          while (queryFragments.length > 1) {\n            const aliasNodes = xpath.select(\n              queryFragments.join('/') + '/alias',\n              document\n            );\n            if (aliasNodes.length > 0) {\n              const aliasSpecifiedQuery = normalizeXPathQuery(\n                queryFragments.join('/') +\n                  '/' +\n                  aliasNodes[0].getAttribute('path') +\n                  '/' +\n                  poppedQueryFragments.join('/')\n              );\n              Array.prototype.push.apply(\n                prioritizedResults,\n                finder(aliasSpecifiedQuery)\n              );\n              break;\n            }\n            poppedQueryFragments.unshift(queryFragments.pop());\n          }\n        } else {\n          Array.prototype.push.apply(\n            prioritizedResults,\n            resultsForLocaleDocument\n          );\n        }\n      });\n      return prioritizedResults;\n    };\n  },\n\n  extractLocaleDisplayPattern(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const localeDisplayPattern = {};\n    finder('/ldml/localeDisplayNames/localeDisplayPattern/*').forEach(\n      (node) => {\n        localeDisplayPattern[node.nodeName] = node.textContent;\n      }\n    );\n    return localeDisplayPattern;\n  },\n\n  extractLanguageDisplayNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const languageDisplayNames = {};\n    finder('/ldml/localeDisplayNames/languages/language').forEach((node) => {\n      const id = normalizeLocaleId(node.getAttribute('type'));\n      languageDisplayNames[id] = languageDisplayNames[id] || node.textContent;\n    });\n    return languageDisplayNames;\n  },\n\n  extractTimeZoneDisplayNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const timeZoneDisplayNames = {};\n    finder('/ldml/dates/timeZoneNames/zone').forEach((zoneNode) => {\n      const timeZoneId = zoneNode.getAttribute('type');\n\n      const exemplarCityNodes = xpath.select('exemplarCity', zoneNode);\n\n      let tzNameLocale;\n      if (exemplarCityNodes.length > 0) {\n        tzNameLocale = exemplarCityNodes[0].textContent;\n      } else {\n        const genericDisplayNameNodes = xpath.select('long/generic', zoneNode);\n        if (genericDisplayNameNodes.length > 0) {\n          tzNameLocale = genericDisplayNameNodes[0].textContent;\n        } else {\n          const longDisplayNameNodes = xpath.select('long/standard', zoneNode);\n          if (longDisplayNameNodes.length > 0) {\n            tzNameLocale = longDisplayNameNodes[0].textContent;\n          }\n        }\n      }\n      if (tzNameLocale) {\n        timeZoneDisplayNames[timeZoneId] =\n          timeZoneDisplayNames[timeZoneId] || tzNameLocale;\n      }\n    });\n    return timeZoneDisplayNames;\n  },\n\n  extractTimeZoneFormats(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const timeZoneFormats = {};\n    [\n      'hourFormat',\n      'gmtFormat',\n      'gmtZeroFormat',\n      'regionFormat',\n      'fallbackFormat',\n      'fallbackRegionFormat',\n    ].forEach((tagName) => {\n      finder('/ldml/dates/timeZoneNames/' + tagName).forEach((node) => {\n        const formatName = node.nodeName.replace(/Format$/, '');\n\n        let value = node.textContent;\n        if (formatName === 'hour') {\n          value = value.split(';');\n        }\n        timeZoneFormats[formatName] = timeZoneFormats[formatName] || value;\n      });\n    });\n    finder('/ldml/dates/timeZoneNames/regionFormat[@type]').forEach((node) => {\n      const type = node.getAttribute('type');\n      timeZoneFormats.regions = timeZoneFormats.regions || {};\n      timeZoneFormats.regions[type] =\n        timeZoneFormats.regions[type] || node.textContent;\n    });\n    return timeZoneFormats;\n  },\n\n  extractTerritoryDisplayNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const territoryDisplayNames = {};\n    finder('/ldml/localeDisplayNames/territories/territory').forEach(\n      (territoryNode) => {\n        let territoryId = territoryNode.getAttribute('type');\n        const alternative = territoryNode.getAttribute('alt');\n        if (alternative) {\n          // Use the same format for alternative names as cldr-json (e.g. BA-alt-short)\n          territoryId = `${territoryId}-alt-${alternative}`;\n        }\n        territoryDisplayNames[territoryId] =\n          territoryDisplayNames[territoryId] || territoryNode.textContent;\n      }\n    );\n    return territoryDisplayNames;\n  },\n\n  /**\n   * Subdivisions are usually subnational administrative entities.\n   * Codes follow the BCP47 standard, e.g. `usca` for California, USA.\n   * Note that these codes are similar but not identical to ISO 3166-2 codes.\n   * Unlike ISO 3166-2, CLDR never reuses a code.\n   *\n   * @param {string} localeId Locale or subdivision names\n   * @returns {Object} A dictionary of subdivision codes and their names.\n   *\n   * @example\n   * // returns 'Zealand'\n   * cldr.extractSubdivisionDisplayNames('en').dk85\n   */\n  extractSubdivisionDisplayNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'subdivisions')\n    );\n    const subdivisionDisplayNames = {};\n    finder('/ldml/localeDisplayNames/subdivisions/subdivision').forEach(\n      (node) => {\n        const subdivisionId = node.getAttribute('type');\n        subdivisionDisplayNames[subdivisionId] =\n          subdivisionDisplayNames[subdivisionId] || node.textContent;\n      }\n    );\n    return subdivisionDisplayNames;\n  },\n\n  /**\n   * Subdivision aliases contain deprecated or alternative subdivision\n   * codes. Note that the returned code may be either\n   * a territory code, (such as 'cn71' => 'TW'), or a subdivision code.\n   *\n   * @returns {Object} A dictionary with replacement code and reason\n   *\n   * @example\n   * // returns {replacement: 'cz71', reason: 'deprecated'}\n   * cldr.extractSubdivisionAliases().czol\n   *\n   * // returns {replacement: 'GU', reason: 'overlong'}\n   * cldr.extractSubdivisionAliases().usgu\n   */\n  extractSubdivisionAliases() {\n    const finder = this.createFinder([\n      this.getDocument(\n        Path.resolve(\n          this.cldrPath,\n          'common',\n          'supplemental',\n          'supplementalMetadata.xml'\n        )\n      ),\n    ]);\n\n    const aliasData = {};\n\n    finder('/supplementalData/metadata/alias/subdivisionAlias').forEach(\n      (subdivisionAliasNode) => {\n        const type = subdivisionAliasNode.getAttribute('type');\n        aliasData[type] = {\n          replacement: subdivisionAliasNode.getAttribute('replacement'),\n          reason: subdivisionAliasNode.getAttribute('reason'),\n        };\n      }\n    );\n\n    return aliasData;\n  },\n\n  /**\n   * Territory aliases contain deprecated or alternative nation/territory\n   * codes.\n   *\n   * @returns {Object} A dictionary with replacement code and reason\n   *\n   * @example\n   * // returns {replacement: 'MM', reason: 'deprecated'}\n   * cldr.extractTerritorpAliases().BU\n   */\n  extractTerritoryAliases() {\n    const finder = this.createFinder([\n      this.getDocument(\n        Path.resolve(\n          this.cldrPath,\n          'common',\n          'supplemental',\n          'supplementalMetadata.xml'\n        )\n      ),\n    ]);\n\n    const aliasData = {};\n\n    finder('/supplementalData/metadata/alias/territoryAlias').forEach(\n      (territoryAliasNode) => {\n        const type = territoryAliasNode.getAttribute('type');\n        aliasData[type] = {\n          replacement: territoryAliasNode.getAttribute('replacement'),\n          reason: territoryAliasNode.getAttribute('reason'),\n        };\n      }\n    );\n\n    return aliasData;\n  },\n\n  extractCurrencyInfoById(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const currencyDisplayNameByCurrencyId = {};\n\n    const currencyDisplayNameByCurrencyIdAndCount = {};\n\n    const currencySymbolByCurrencyId = {};\n\n    finder('/ldml/numbers/currencies/currency/displayName').forEach(\n      (displayNameNode) => {\n        const currencyId = displayNameNode.parentNode.getAttribute('type');\n\n        const countAttribute = displayNameNode.getAttribute('count');\n        if (countAttribute) {\n          currencyDisplayNameByCurrencyIdAndCount[currencyId] =\n            currencyDisplayNameByCurrencyIdAndCount[currencyId] || {};\n          currencyDisplayNameByCurrencyIdAndCount[currencyId][countAttribute] =\n            displayNameNode.textContent;\n        } else {\n          currencyDisplayNameByCurrencyId[currencyId] =\n            currencyDisplayNameByCurrencyId[currencyId] ||\n            displayNameNode.textContent;\n        }\n      }\n    );\n\n    finder('/ldml/numbers/currencies/currency/symbol').forEach((symbolNode) => {\n      const currencyId = symbolNode.parentNode.getAttribute('type');\n      currencySymbolByCurrencyId[currencyId] =\n        currencySymbolByCurrencyId[currencyId] || symbolNode.textContent;\n    });\n\n    const currencyInfoById = {};\n    Object.keys(currencyDisplayNameByCurrencyId).forEach((currencyId) => {\n      currencyInfoById[currencyId] = Object.assign(\n        {\n          displayName: currencyDisplayNameByCurrencyId[currencyId],\n          symbol: currencySymbolByCurrencyId[currencyId],\n        },\n        currencyDisplayNameByCurrencyIdAndCount[currencyId]\n      );\n    });\n    return currencyInfoById;\n  },\n\n  extractScriptDisplayNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const scriptDisplayNames = {};\n    finder('/ldml/localeDisplayNames/scripts/script').forEach((scriptNode) => {\n      const id = scriptNode.getAttribute('type');\n      scriptDisplayNames[id] = scriptDisplayNames[id] || scriptNode.textContent;\n    });\n    return scriptDisplayNames;\n  },\n\n  extractVariantDisplayNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const variantDisplayNames = {};\n    finder('/ldml/localeDisplayNames/variants/variant').forEach(\n      (variantNode) => {\n        const id = variantNode.getAttribute('type');\n        variantDisplayNames[id] =\n          variantDisplayNames[id] || variantNode.textContent;\n      }\n    );\n    return variantDisplayNames;\n  },\n\n  extractKeyTypes(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const keyTypes = {};\n    finder('/ldml/localeDisplayNames/keys/key').forEach((keyNode) => {\n      const type = keyNode.getAttribute('type');\n      keyTypes[type] = { displayName: keyNode.textContent };\n    });\n    finder('/ldml/localeDisplayNames/types/type').forEach((typeNode) => {\n      const key = typeNode.getAttribute('key');\n\n      const type = normalizeProperty(typeNode.getAttribute('type'));\n      keyTypes[key] = keyTypes[key] || {};\n      keyTypes[key].types = keyTypes[key].types || {};\n      keyTypes[key].types[type] = typeNode.textContent;\n    });\n    return keyTypes;\n  },\n\n  extractMeasurementSystemNames(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const measurementSystemNames = {};\n    finder(\n      '/ldml/localeDisplayNames/measurementSystemNames/measurementSystemName'\n    ).forEach((measurementSystemNameNode) => {\n      const id = measurementSystemNameNode.getAttribute('type');\n      measurementSystemNames[id] =\n        measurementSystemNames[id] || measurementSystemNameNode.textContent;\n    });\n    return measurementSystemNames;\n  },\n\n  extractCodePatterns(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const codePatterns = {};\n    finder('/ldml/localeDisplayNames/codePatterns/codePattern').forEach(\n      (codePatternNode) => {\n        const id = codePatternNode.getAttribute('type');\n        codePatterns[id] = codePatterns[id] || codePatternNode.textContent;\n      }\n    );\n    return codePatterns;\n  },\n\n  // Calendar extraction methods:\n\n  extractEraNames(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let eraNames;\n    ['eraNames', 'eraAbbr'].forEach((eraType) => {\n      const typeInOutput = { eraNames: 'wide', eraAbbr: 'abbreviated' }[\n        eraType\n      ];\n      finder(\n        \"/ldml/dates/calendars/calendar[@type='\" +\n          calendarId +\n          \"']/eras/\" +\n          eraType +\n          '/era'\n      ).forEach((eraNode) => {\n        const type = parseInt(eraNode.getAttribute('type'), 10);\n        eraNames = eraNames || {};\n        eraNames[typeInOutput] = eraNames[typeInOutput] || {};\n        eraNames[typeInOutput][type] =\n          eraNames[typeInOutput][type] || eraNode.textContent;\n      });\n    });\n    return convertObjectsWithIntegerKeysToArrays(eraNames);\n  },\n\n  extractQuarterNames(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let quarterNames;\n    ['format', 'stand-alone'].forEach((quarterContext) => {\n      const quarterContextCamelCase = normalizeProperty(quarterContext); // stand-alone => standAlone\n      ['abbreviated', 'narrow', 'wide'].forEach((quarterWidth) => {\n        finder(\n          \"/ldml/dates/calendars/calendar[@type='\" +\n            calendarId +\n            \"']/quarters/quarterContext[@type='\" +\n            quarterContext +\n            \"']/quarterWidth[@type='\" +\n            quarterWidth +\n            \"']/quarter\"\n        ).forEach((quarterNode) => {\n          const quarterNo = parseInt(quarterNode.getAttribute('type'), 10) - 1;\n\n          quarterNames = quarterNames || {};\n          quarterNames[quarterContextCamelCase] =\n            quarterNames[quarterContextCamelCase] || {};\n          quarterNames[quarterContextCamelCase][quarterWidth] =\n            quarterNames[quarterContextCamelCase][quarterWidth] || {};\n          quarterNames[quarterContextCamelCase][quarterWidth][quarterNo] =\n            quarterNames[quarterContextCamelCase][quarterWidth][quarterNo] ||\n            quarterNode.textContent;\n        });\n      });\n    });\n    return convertObjectsWithIntegerKeysToArrays(quarterNames);\n  },\n\n  extractDayPeriods(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let dayPeriods;\n    ['format', 'stand-alone'].forEach((dayPeriodContext) => {\n      const dayPeriodContextCamelCase = normalizeProperty(dayPeriodContext); // stand-alone => standAlone\n      ['abbreviated', 'narrow', 'wide', 'short'].forEach((dayPeriodWidth) => {\n        finder(\n          \"/ldml/dates/calendars/calendar[@type='\" +\n            calendarId +\n            \"']/dayPeriods/dayPeriodContext[@type='\" +\n            dayPeriodContext +\n            \"']/dayPeriodWidth[@type='\" +\n            dayPeriodWidth +\n            \"']/dayPeriod\"\n        ).forEach((dayPeriodNode) => {\n          const type = dayPeriodNode.getAttribute('type');\n\n          dayPeriods = dayPeriods || {};\n          dayPeriods[dayPeriodContextCamelCase] =\n            dayPeriods[dayPeriodContextCamelCase] || {};\n          dayPeriods[dayPeriodContextCamelCase][dayPeriodWidth] =\n            dayPeriods[dayPeriodContextCamelCase][dayPeriodWidth] || {};\n          dayPeriods[dayPeriodContextCamelCase][dayPeriodWidth][type] =\n            dayPeriods[dayPeriodContextCamelCase][dayPeriodWidth][type] ||\n            dayPeriodNode.textContent;\n        });\n      });\n    });\n    return dayPeriods;\n  },\n\n  extractCyclicNames(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let cyclicNames;\n    ['dayParts', 'days', 'months', 'years', 'zodiacs'].forEach(\n      (cyclicNameSet) => {\n        ['format'].forEach((cyclicNameContext) => {\n          ['abbreviated', 'narrow', 'wide'].forEach((cyclicNameWidth) => {\n            finder(\n              \"/ldml/dates/calendars/calendar[@type='\" +\n                calendarId +\n                \"']/cyclicNameSets/cyclicNameSet[@type='\" +\n                cyclicNameSet +\n                \"']/cyclicNameContext[@type='\" +\n                cyclicNameContext +\n                \"']/cyclicNameWidth[@type='\" +\n                cyclicNameWidth +\n                \"']/cyclicName\"\n            ).forEach((cyclicNameNode) => {\n              const type = cyclicNameNode.getAttribute('type');\n              cyclicNames = cyclicNames || {};\n              cyclicNames[cyclicNameSet] = cyclicNames[cyclicNameSet] || {};\n              cyclicNames[cyclicNameSet][cyclicNameContext] =\n                cyclicNames[cyclicNameSet][cyclicNameContext] || {};\n              cyclicNames[cyclicNameSet][cyclicNameContext][cyclicNameWidth] =\n                cyclicNames[cyclicNameSet][cyclicNameContext][\n                  cyclicNameWidth\n                ] || {};\n              cyclicNames[cyclicNameSet][cyclicNameContext][cyclicNameWidth][\n                type\n              ] =\n                cyclicNames[cyclicNameSet][cyclicNameContext][cyclicNameWidth][\n                  type\n                ] || cyclicNameNode.textContent;\n            });\n          });\n        });\n      }\n    );\n    return convertObjectsWithIntegerKeysToArrays(cyclicNames);\n  },\n\n  extractMonthNames(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let monthNames;\n    ['format', 'stand-alone'].forEach((monthContext) => {\n      const monthContextCamelCase = normalizeProperty(monthContext); // stand-alone => standAlone\n      ['abbreviated', 'narrow', 'wide'].forEach((monthWidth) => {\n        finder(\n          \"/ldml/dates/calendars/calendar[@type='\" +\n            calendarId +\n            \"']/months/monthContext[@type='\" +\n            monthContext +\n            \"']/monthWidth[@type='\" +\n            monthWidth +\n            \"']/month\"\n        ).forEach((monthNode) => {\n          const monthNo = parseInt(monthNode.getAttribute('type'), 10) - 1;\n          monthNames = monthNames || {};\n          monthNames[monthContextCamelCase] =\n            monthNames[monthContextCamelCase] || {};\n          monthNames[monthContextCamelCase][monthWidth] =\n            monthNames[monthContextCamelCase][monthWidth] || {};\n          monthNames[monthContextCamelCase][monthWidth][monthNo] =\n            monthNames[monthContextCamelCase][monthWidth][monthNo] ||\n            monthNode.textContent;\n        });\n      });\n    });\n    return convertObjectsWithIntegerKeysToArrays(monthNames);\n  },\n\n  extractMonthPatterns(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let monthPatterns;\n    ['format', 'numeric', 'stand-alone'].forEach((monthPatternContext) => {\n      const monthPatternContextCamelCase = normalizeProperty(\n        monthPatternContext\n      ); // stand-alone => standAlone\n      ['abbreviated', 'narrow', 'wide', 'all'].forEach((monthPatternWidth) => {\n        finder(\n          \"/ldml/dates/calendars/calendar[@type='\" +\n            calendarId +\n            \"']/monthPatterns/monthPatternContext[@type='\" +\n            monthPatternContext +\n            \"']/monthPatternWidth[@type='\" +\n            monthPatternWidth +\n            \"']/monthPattern\"\n        ).forEach((monthPatternNode) => {\n          const type = monthPatternNode.getAttribute('type');\n          monthPatterns = monthPatterns || {};\n          monthPatterns[monthPatternContextCamelCase] =\n            monthPatterns[monthPatternContextCamelCase] || {};\n          monthPatterns[monthPatternContextCamelCase][monthPatternWidth] =\n            monthPatterns[monthPatternContextCamelCase][monthPatternWidth] ||\n            {};\n          monthPatterns[monthPatternContextCamelCase][monthPatternWidth][type] =\n            monthPatterns[monthPatternContextCamelCase][monthPatternWidth][\n              type\n            ] || monthPatternNode.textContent;\n        });\n      });\n    });\n    return monthPatterns;\n  },\n\n  extractDayNames(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const dayNoByCldrId = {\n      sun: 0,\n      mon: 1,\n      tue: 2,\n      wed: 3,\n      thu: 4,\n      fri: 5,\n      sat: 6,\n    };\n\n    let dayNames;\n    ['format', 'numeric', 'stand-alone'].forEach((dayContext) => {\n      const dayContextCamelCase = normalizeProperty(dayContext); // stand-alone => standAlone\n      ['abbreviated', 'narrow', 'wide', 'short'].forEach((dayWidth) => {\n        finder(\n          \"/ldml/dates/calendars/calendar[@type='\" +\n            calendarId +\n            \"']/days/dayContext[@type='\" +\n            dayContext +\n            \"']/dayWidth[@type='\" +\n            dayWidth +\n            \"']/day\"\n        ).forEach((dayNode) => {\n          const dayNo = dayNoByCldrId[dayNode.getAttribute('type')];\n          dayNames = dayNames || {};\n          dayNames[dayContextCamelCase] = dayNames[dayContextCamelCase] || {};\n          dayNames[dayContextCamelCase][dayWidth] =\n            dayNames[dayContextCamelCase][dayWidth] || {};\n          dayNames[dayContextCamelCase][dayWidth][dayNo] =\n            dayNames[dayContextCamelCase][dayWidth][dayNo] ||\n            dayNode.textContent;\n        });\n      });\n    });\n    return convertObjectsWithIntegerKeysToArrays(dayNames);\n  },\n\n  extractFields(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let fields;\n    finder('/ldml/dates/fields/field/displayName').forEach(\n      (fieldDisplayNameNode) => {\n        const fieldName = fieldDisplayNameNode.parentNode.getAttribute('type');\n        fields = fields || {};\n        fields[fieldName] = fields[fieldName] || {};\n        fields[fieldName].displayName =\n          fields[fieldName].displayName || fieldDisplayNameNode.textContent;\n      }\n    );\n\n    finder('/ldml/dates/fields/field/relative').forEach((fieldRelativeNode) => {\n      const fieldName = fieldRelativeNode.parentNode.getAttribute('type');\n\n      const type = fieldRelativeNode.getAttribute('type');\n      fields = fields || {};\n      fields[fieldName] = fields[fieldName] || {};\n      fields[fieldName].relative = fields[fieldName].relative || {};\n      fields[fieldName].relative[type] =\n        fields[fieldName].relative[type] || fieldRelativeNode.textContent;\n    });\n\n    finder('/ldml/dates/fields/field/relativeTime/relativeTimePattern').forEach(\n      (relativeTimePatternNode) => {\n        const relativeTimeNode = relativeTimePatternNode.parentNode;\n\n        const fieldName = relativeTimeNode.parentNode.getAttribute('type');\n\n        const type = relativeTimeNode.getAttribute('type');\n\n        const count = relativeTimePatternNode.getAttribute('count');\n        fields = fields || {};\n        fields[fieldName] = fields[fieldName] || {};\n        fields[fieldName].relativeTime = fields[fieldName].relativeTime || {};\n        fields[fieldName].relativeTime[type] =\n          fields[fieldName].relativeTime[type] || {};\n        fields[fieldName].relativeTime[type][count] =\n          fields[fieldName].relativeTime[type][count] ||\n          relativeTimePatternNode.textContent;\n      }\n    );\n    return fields;\n  },\n\n  extractDateTimePatterns(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let dateTimePatterns;\n    finder(\n      \"/ldml/dates/calendars/calendar[@type='\" +\n        calendarId +\n        \"']/dateTimeFormats/dateTimeFormatLength/dateTimeFormat\"\n    ).forEach((dateTimeFormatNode) => {\n      const dateTimeFormatLengthType = dateTimeFormatNode.parentNode.getAttribute(\n        'type'\n      );\n\n      const patternNodes = xpath.select('pattern', dateTimeFormatNode);\n      if (patternNodes.length !== 1) {\n        throw new Error('Expected exactly one pattern in dateTimeFormatNode');\n      }\n      dateTimePatterns = dateTimePatterns || {};\n      dateTimePatterns[dateTimeFormatLengthType] =\n        dateTimePatterns[dateTimeFormatLengthType] ||\n        patternNodes[0].textContent;\n    });\n    return dateTimePatterns;\n  },\n\n  extractDateOrTimeFormats(localeId, calendarId, dateOrTime) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let formats;\n    finder(\n      \"/ldml/dates/calendars/calendar[@type='\" +\n        calendarId +\n        \"']/\" +\n        dateOrTime +\n        'Formats/' +\n        dateOrTime +\n        'FormatLength/' +\n        dateOrTime +\n        'Format/*'\n    ).forEach((patternNode) => {\n      const type = patternNode.parentNode.parentNode.getAttribute('type');\n      formats = formats || {};\n      formats[type] = formats[type] || patternNode.textContent;\n    });\n    return formats;\n  },\n\n  extractDateFormats(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    return this.extractDateOrTimeFormats(localeId, calendarId, 'date');\n  },\n\n  extractTimeFormats(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    return this.extractDateOrTimeFormats(localeId, calendarId, 'time');\n  },\n\n  extractDateFormatItems(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let dateFormatItems;\n    finder(\n      \"/ldml/dates/calendars/calendar[@type='\" +\n        calendarId +\n        \"']/dateTimeFormats/availableFormats/dateFormatItem\"\n    ).forEach((dateFormatItemNode) => {\n      const id = dateFormatItemNode.getAttribute('id');\n      dateFormatItems = dateFormatItems || {};\n      dateFormatItems[id] =\n        dateFormatItems[id] || dateFormatItemNode.textContent;\n    });\n    return dateFormatItems;\n  },\n\n  extractDateIntervalFormats(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let dateIntervalFormats;\n    finder(\n      \"/ldml/dates/calendars/calendar[@type='\" +\n        calendarId +\n        \"']/dateTimeFormats/intervalFormats/intervalFormatItem\"\n    ).forEach((intervalFormatItemNode) => {\n      const dateIntervalFormat = {};\n      for (let i = 0; i < intervalFormatItemNode.childNodes.length; i += 1) {\n        const greatestDifferenceNode = intervalFormatItemNode.childNodes[i];\n        if (greatestDifferenceNode.nodeType !== 1) {\n          // Skip whitespace node\n          continue;\n        }\n        const greatestDifferenceIdAttribute = greatestDifferenceNode.getAttribute(\n          'id'\n        );\n        const greatestDifferenceId = greatestDifferenceIdAttribute;\n        dateIntervalFormat[greatestDifferenceId] =\n          dateIntervalFormat[greatestDifferenceId] ||\n          greatestDifferenceNode.textContent;\n      }\n      const id = intervalFormatItemNode.getAttribute('id');\n      dateIntervalFormats = dateIntervalFormats || {};\n      dateIntervalFormats[id] = dateIntervalFormats[id] || dateIntervalFormat;\n    });\n    return dateIntervalFormats;\n  },\n\n  extractDateIntervalFallbackFormat(localeId, calendarId) {\n    this.checkValidLocaleId(localeId);\n    calendarId = calendarId || 'gregorian';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let dateIntervalFallbackFormat;\n    finder(\n      \"/ldml/dates/calendars/calendar[@type='\" +\n        calendarId +\n        \"']/dateTimeFormats/intervalFormats/intervalFormatFallback\"\n    ).forEach((intervalFormatFallbackNode) => {\n      dateIntervalFallbackFormat =\n        dateIntervalFallbackFormat || intervalFormatFallbackNode.textContent;\n    });\n    return dateIntervalFallbackFormat;\n  },\n\n  // Number extraction code:\n\n  extractNumberSymbols(localeId, numberSystemId) {\n    this.checkValidLocaleId(localeId);\n    numberSystemId = numberSystemId || 'latn';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let numberSymbols;\n    finder(\n      \"/ldml/numbers/symbols[@numberSystem = '\" +\n        numberSystemId +\n        \"']/*[name() != 'alias']\"\n    )\n      .concat(finder(\"/ldml/numbers/symbols/*[name() != 'alias']\"))\n      .forEach((numberSymbolNode) => {\n        const symbolId = numberSymbolNode.nodeName;\n        numberSymbols = numberSymbols || {};\n        numberSymbols[symbolId] =\n          numberSymbols[symbolId] || numberSymbolNode.textContent;\n      });\n    return numberSymbols;\n  },\n\n  extractNumberFormats(localeId, numberSystemId) {\n    this.checkValidLocaleId(localeId);\n    numberSystemId = numberSystemId || 'latn';\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let numberFormats;\n    ['scientific', 'decimal', 'currency', 'percent'].forEach((formatType) => {\n      ['full', 'long', 'medium', 'short'].forEach((length) => {\n        finder(\n          '/ldml/numbers/' +\n            formatType +\n            \"Formats[@numberSystem = '\" +\n            numberSystemId +\n            \"']/\" +\n            formatType +\n            \"FormatLength[@type='\" +\n            length +\n            \"']/\" +\n            formatType +\n            'Format/pattern'\n        ).forEach((patternNode) => {\n          const type = patternNode.getAttribute('type');\n\n          const count = patternNode.getAttribute('count');\n          numberFormats = numberFormats || {};\n          numberFormats[formatType] = numberFormats[formatType] || {};\n          numberFormats[formatType][length] =\n            numberFormats[formatType][length] || {};\n          numberFormats[formatType][length][type] =\n            numberFormats[formatType][length][type] || {};\n          numberFormats[formatType][length][type][count] =\n            numberFormats[formatType][length][type][count] ||\n            patternNode.textContent;\n        });\n      });\n      finder(\n        '/ldml/numbers/' +\n          formatType +\n          \"Formats[@numberSystem = '\" +\n          numberSystemId +\n          \"']/\" +\n          formatType +\n          'FormatLength[not(@type)]/' +\n          formatType +\n          'Format/pattern'\n      ).forEach((patternNode) => {\n        numberFormats = numberFormats || {};\n        numberFormats[formatType] = numberFormats[formatType] || {};\n        numberFormats[formatType].default =\n          numberFormats[formatType].default || patternNode.textContent;\n      });\n      finder(\n        '/ldml/numbers/' +\n          formatType +\n          \"Formats[@numberSystem = '\" +\n          numberSystemId +\n          \"']/unitPattern\"\n      ).forEach((unitPatternNode) => {\n        const count = unitPatternNode.getAttribute('count');\n        numberFormats = numberFormats || {};\n        numberFormats[formatType] = numberFormats[formatType] || {};\n        numberFormats[formatType][count] =\n          numberFormats[formatType][count] || unitPatternNode.textContent;\n      });\n    });\n\n    finder(\n      \"/ldml/numbers/currencyFormats[@numberSystem = '\" +\n        numberSystemId +\n        \"']/currencySpacing\"\n    ).forEach((currencySpacingNode) => {\n      numberFormats = numberFormats || {};\n      numberFormats.currency = numberFormats.currency || {};\n      numberFormats.currency.currencySpacing =\n        numberFormats.currency.currencySpacing || {};\n\n      ['before', 'after'].forEach((place) => {\n        const placeData = (numberFormats.currency.currencySpacing[\n          place + 'Currency'\n        ] = numberFormats.currency.currencySpacing[place + 'Currency'] || {});\n\n        ['currencyMatch', 'surroundingMatch', 'insertBetween'].forEach(\n          (spacingPropertyName) => {\n            const match = xpath.select(\n              place + 'Currency/' + spacingPropertyName,\n              currencySpacingNode\n            );\n            if (match.length > 0) {\n              numberFormats.currency.currencySpacing[place + 'Currency'][\n                spacingPropertyName\n              ] = match[0].textContent;\n            }\n          }\n        );\n\n        ['currencyMatch', 'surroundingMatch'].forEach((spacingPropertyName) => {\n          if (placeData[spacingPropertyName]) {\n            placeData[\n              spacingPropertyName\n            ] = unicoderegexp.expandCldrUnicodeSetIdToCharacterClass(\n              placeData[spacingPropertyName]\n            );\n          }\n        });\n      });\n    });\n\n    return numberFormats;\n  },\n\n  extractDefaultNumberSystemId(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    let defaultNumberSystemId;\n    finder('/ldml/numbers/defaultNumberingSystem').forEach(\n      (defaultNumberingSystemNode) => {\n        defaultNumberSystemId =\n          defaultNumberSystemId || defaultNumberingSystemNode.textContent;\n      }\n    );\n    return defaultNumberSystemId;\n  },\n\n  extractUnitPatterns(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const unitPatterns = {};\n    finder('/ldml/units/unitLength/unit/unitPattern').forEach(\n      (unitPatternNode) => {\n        const unitNode = unitPatternNode.parentNode;\n\n        const unitLength = unitNode.parentNode.getAttribute('type');\n\n        const unitId = normalizeProperty(unitNode.getAttribute('type'));\n        unitPatterns[unitLength] = unitPatterns[unitLength] || {};\n        unitPatterns[unitLength].unit = unitPatterns[unitLength].unit || {};\n        unitPatterns[unitLength].unit[unitId] =\n          unitPatterns[unitLength].unit[unitId] || {};\n        const count = unitPatternNode.getAttribute('count');\n        unitPatterns[unitLength].unit[unitId][count] =\n          unitPatterns[unitLength].unit[unitId][count] ||\n          unitPatternNode.textContent;\n      }\n    );\n    finder('/ldml/units/unitLength/compoundUnit/compoundUnitPattern').forEach(\n      (compoundUnitPatternNode) => {\n        const compoundUnitNode = compoundUnitPatternNode.parentNode;\n\n        const unitLength = compoundUnitNode.parentNode.getAttribute('type');\n\n        const compoundUnitId = compoundUnitNode.getAttribute('type');\n\n        unitPatterns[unitLength].compoundUnit =\n          unitPatterns[unitLength].compoundUnit || {};\n        unitPatterns[unitLength].compoundUnit[compoundUnitId] =\n          compoundUnitPatternNode.textContent;\n      }\n    );\n    return unitPatterns;\n  },\n\n  extractDelimiters(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const delimiters = {};\n    finder('/ldml/delimiters/*').forEach((delimiterNode) => {\n      const type = delimiterNode.nodeName;\n      delimiters[type] = delimiters[type] || delimiterNode.textContent;\n    });\n    return delimiters;\n  },\n\n  extractListPatterns(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const listPatterns = {};\n    finder('/ldml/listPatterns/listPattern/listPatternPart').forEach(\n      (listPatternPartNode) => {\n        const listPatternTypeAttribute = listPatternPartNode.parentNode.getAttribute(\n          'type'\n        );\n\n        const type = listPatternTypeAttribute\n          ? normalizeProperty(listPatternTypeAttribute)\n          : 'default';\n\n        const part = listPatternPartNode.getAttribute('type');\n        listPatterns[type] = listPatterns[type] || {};\n        listPatterns[type][part] =\n          listPatterns[type][part] || listPatternPartNode.textContent;\n      }\n    );\n    return listPatterns;\n  },\n\n  extractCharacters(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const characters = {\n      exemplar: {},\n      ellipsis: {},\n    };\n    finder('/ldml/characters/exemplarCharacters').forEach(\n      (exemplarCharactersNode) => {\n        const typeAttr = exemplarCharactersNode.getAttribute('type');\n\n        const type = typeAttr || 'default';\n        characters.exemplar[type] =\n          characters.exemplar[type] ||\n          exemplarCharactersNode.textContent.replace(/^\\[|\\]$/g, '').split(' ');\n      }\n    );\n    finder('/ldml/characters/ellipsis').forEach((ellipsisNode) => {\n      const type = ellipsisNode.getAttribute('type');\n      characters.ellipsis[type] =\n        characters.ellipsis[type] || ellipsisNode.textContent;\n    });\n    finder('/ldml/characters/moreInformation').forEach(\n      (moreInformationNode) => {\n        characters.moreInformation =\n          characters.moreInformation || moreInformationNode.textContent;\n      }\n    );\n    return characters;\n  },\n\n  /**\n   * @param {string} localeId\n   * @param {string} cardinalOrOrdinal - 'cardinal' or 'ordinal'\n   * @returns {CldrPluralRuleSet} A set of plural rules\n   */\n  _extractPluralRules(localeId, cardinalOrOrdinal) {\n    this.checkValidLocaleId(localeId);\n    const that = this;\n\n    const document = that.getDocument(\n      Path.resolve(\n        that.cldrPath,\n        'common',\n        'supplemental',\n        cardinalOrOrdinal === 'ordinal' ? 'ordinals.xml' : 'plurals.xml'\n      )\n    );\n\n    const subLocaleIds = that.expandLocaleIdToPrioritizedList(localeId);\n\n    let pluralRules = new CldrPluralRuleSet();\n    for (let i = 0; i < subLocaleIds.length; i += 1) {\n      const subLocaleId = subLocaleIds[i];\n\n      const matchLocalesXPathExpr =\n        \"@locales = '\" +\n        subLocaleId +\n        \"' or \" +\n        \"starts-with(@locales, '\" +\n        subLocaleId +\n        \"') or \" +\n        \"contains(@locales, ' \" +\n        subLocaleId +\n        \" ') or \" +\n        \"substring(@locales, string-length(@locales) - string-length(' \" +\n        subLocaleId +\n        \"') + 1) = ' \" +\n        subLocaleId +\n        \"'\";\n\n      const pluralRulesNodes = xpath.select(\n        '/supplementalData/plurals/pluralRules[' + matchLocalesXPathExpr + ']',\n        document\n      );\n\n      const cldrPluralRuleSet = new CldrPluralRuleSet();\n      if (pluralRulesNodes.length > 0) {\n        xpath\n          .select('pluralRule', pluralRulesNodes[0])\n          .forEach((pluralRuleNode) => {\n            cldrPluralRuleSet.addRule(\n              pluralRuleNode.textContent,\n              pluralRuleNode.getAttribute('count')\n            );\n          });\n        pluralRules = cldrPluralRuleSet;\n        break;\n      }\n    }\n    return pluralRules;\n  },\n\n  _extractPluralRuleAst(localeId, cardinalOrOrdinal) {\n    this.checkValidLocaleId(localeId);\n    return this._extractPluralRules(\n      localeId,\n      cardinalOrOrdinal\n    ).toJavaScriptFunctionBodyAst();\n  },\n\n  extractPluralClasses(localeId, cardinalOrOrdinal) {\n    this.checkValidLocaleId(localeId);\n    return this._extractPluralRules(\n      localeId,\n      cardinalOrOrdinal\n    ).availablePluralClasses();\n  },\n\n  extractPluralRuleFunction(localeId, cardinalOrOrdinal) {\n    this.checkValidLocaleId(localeId);\n    // eslint-disable-next-line no-new-func\n    return new Function(\n      'val',\n      escodegen.generate({\n        type: 'Program',\n        body: this._extractPluralRuleAst(localeId, cardinalOrOrdinal),\n      })\n    );\n  },\n\n  // 'types' is optional, defaults to all available\n  extractRbnfFunctionByType(localeId, types) {\n    this.checkValidLocaleId(localeId);\n    const cardinalPluralRuleAst = this._extractPluralRuleAst(\n      localeId,\n      'cardinal'\n    );\n    const ordinalPluralRuleAst = this._extractPluralRuleAst(\n      localeId,\n      'ordinal'\n    );\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'rbnf')\n    );\n\n    const cldrRbnfRuleSetByType = {};\n    for (const rbnfRuleNode of finder(\n      '/ldml/rbnf/rulesetGrouping/ruleset/rbnfrule'\n    )) {\n      const type = CldrRbnfRuleSet.getSafeRendererName(\n        rbnfRuleNode.parentNode.getAttribute('type')\n      );\n\n      const value = rbnfRuleNode.getAttribute('value');\n      cldrRbnfRuleSetByType[type] =\n        cldrRbnfRuleSetByType[type] ||\n        new CldrRbnfRuleSet({\n          type,\n          cardinalPluralRuleAst,\n          ordinalPluralRuleAst,\n        });\n      if (!cldrRbnfRuleSetByType[type].ruleByValue[value]) {\n        const radixAttribute = rbnfRuleNode.getAttribute('radix');\n        cldrRbnfRuleSetByType[type].ruleByValue[value] = {\n          value,\n          rbnf: rbnfRuleNode.textContent\n            .replace(/;$/, '')\n            .replace(/←/g, '<')\n            .replace(/→/g, '>'),\n          radix: radixAttribute,\n        };\n      }\n    }\n\n    const isAddedByType = {};\n\n    const typesToAdd = types\n      ? [].concat(types)\n      : Object.keys(cldrRbnfRuleSetByType);\n\n    const defaultNumberingSystem = this.extractDefaultNumberSystemId(localeId);\n    const numberingSystem = this.extractNumberingSystem(defaultNumberingSystem);\n    if (numberingSystem.type === 'algorithmic') {\n      typesToAdd.push(numberingSystem.rules);\n    }\n    const zeroCharCode = '0'.charCodeAt(0);\n    const rbnfFunctionByType = {\n      // Provide a (bad) default number rendering implementation to avoid #13\n      renderNumber(number) {\n        if (numberingSystem.type === 'numeric') {\n          return String(number)\n            .split(/(?:)/)\n            .map((ch) => {\n              return (\n                numberingSystem.digits[ch.charCodeAt(0) - zeroCharCode] || ch\n              );\n            })\n            .join('');\n        } else {\n          // numberingSystem.type === 'algorithmic'\n          return this[numberingSystem.rules](number);\n        }\n      },\n    };\n    while (typesToAdd.length > 0) {\n      const type = typesToAdd.shift();\n      if (!(type in isAddedByType)) {\n        isAddedByType[type] = true;\n        const cldrRbnfRuleSet = cldrRbnfRuleSetByType[type];\n        // Some rules aren't available in some locales (such as spellout-cardinal-financial).\n        // The easiest thing is just to skip the missing ones here, even though it can produce\n        // some broken function sets:\n        if (cldrRbnfRuleSet) {\n          const result = cldrRbnfRuleSet.toFunctionAst();\n          // eslint-disable-next-line no-new-func\n          rbnfFunctionByType[type] = new Function(\n            'n',\n            escodegen.generate({\n              type: 'Program',\n              body: result.functionAst.body.body,\n            })\n          );\n          Array.prototype.push.apply(typesToAdd, result.dependencies);\n        }\n      }\n    }\n    return rbnfFunctionByType;\n  },\n\n  extractNumberingSystem(numberingSystemId) {\n    const document = this.getDocument(\n      Path.resolve(\n        this.cldrPath,\n        'common',\n        'supplemental',\n        'numberingSystems.xml'\n      )\n    );\n\n    const numberingSystemNode = xpath.select1(\n      `/supplementalData/numberingSystems/numberingSystem[@id=\"${numberingSystemId}\"]`,\n      document\n    );\n\n    if (!numberingSystemNode) {\n      throw new Error(`Unknown numbering system: ${numberingSystemId}`);\n    }\n    const type = numberingSystemNode.getAttribute('type');\n    const numberingSystem = {\n      type,\n    };\n    if (type === 'numeric') {\n      numberingSystem.digits = numberingSystemNode\n        .getAttribute('digits')\n        .split(/(?:)/u);\n    } else {\n      // type='algorithmic'\n      const rulesAttributeFragments = numberingSystemNode\n        .getAttribute('rules')\n        .split('/');\n\n      numberingSystem.rules = CldrRbnfRuleSet.getSafeRendererName(\n        rulesAttributeFragments[rulesAttributeFragments.length - 1]\n      );\n      if (rulesAttributeFragments.length > 1) {\n        // Eg. [ \"zh\", \"SpelloutRules\", \"spellout-numbering-days\" ]\n        numberingSystem.locale = rulesAttributeFragments[0];\n      }\n    }\n    return numberingSystem;\n  },\n\n  // Deprecated\n  extractDigitsByNumberSystemId() {\n    const document = this.getDocument(\n      Path.resolve(\n        this.cldrPath,\n        'common',\n        'supplemental',\n        'numberingSystems.xml'\n      )\n    );\n\n    const digitsByNumberSystemId = {};\n\n    xpath\n      .select('/supplementalData/numberingSystems/numberingSystem', document)\n      .forEach((numberingSystemNode) => {\n        const numberSystemId = numberingSystemNode.getAttribute('id');\n        if (numberingSystemNode.getAttribute('type') === 'numeric') {\n          digitsByNumberSystemId[\n            numberSystemId\n          ] = numberingSystemNode.getAttribute('digits').split(/(?:)/u);\n        } else {\n          // type='algorithmic'\n          const rulesAttributeFragments = numberingSystemNode\n            .getAttribute('rules')\n            .split('/');\n\n          const ruleType = CldrRbnfRuleSet.getSafeRendererName(\n            rulesAttributeFragments[rulesAttributeFragments.length - 1]\n          );\n          digitsByNumberSystemId[numberSystemId] = ruleType; // A string value means \"use this rbnf renderer for the digits\"\n        }\n      }, this);\n    return digitsByNumberSystemId;\n  },\n\n  extractLayout(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'main')\n    );\n\n    const layout = {};\n    for (const leafNode of finder('/ldml/layout/*/*')) {\n      const type = leafNode.nodeName;\n\n      const parentType = leafNode.parentNode.nodeName;\n      layout[parentType] = layout[parentType] || {};\n      layout[parentType][type] =\n        layout[parentType][type] || leafNode.textContent;\n    }\n    return layout;\n  },\n\n  extractTerritories() {\n    const finder = this.createFinder([\n      this.getDocument(\n        Path.resolve(\n          this.cldrPath,\n          'common',\n          'supplemental',\n          'supplementalData.xml'\n        )\n      ),\n    ]);\n\n    const territoryInfoByTerritoryId = {};\n    for (const territoryCodeNode of finder(\n      '/supplementalData/codeMappings/territoryCodes'\n    )) {\n      const type = territoryCodeNode.getAttribute('type');\n      const numericCode = territoryCodeNode.getAttribute('numeric');\n      const alpha3Code = territoryCodeNode.getAttribute('alpha3');\n\n      const countryInfo = {\n        alpha2Code: type, // ISO 3166-1 alpha-2\n      };\n\n      if (alpha3Code) {\n        // ISO 3166-1 alpha-3\n        countryInfo.alpha3Code = alpha3Code;\n      }\n\n      if (numericCode) {\n        // UN M.49 / ISO-3166-1 numeric-3\n        // A numeric code may be reused by another country, e.g. Zaire and the DRC both have numeric code 180, but only the DRC currently exists\n        // Entries without a numeric code are few, which are usually exceptional reservations in ISO 3166-1 alpha-2. Example: IC, Canary Islands\n        countryInfo.numericCode = numericCode;\n      }\n\n      territoryInfoByTerritoryId[type] = countryInfo;\n    }\n\n    return territoryInfoByTerritoryId;\n  },\n\n  extractTerritoryInfo() {\n    const finder = this.createFinder([\n      this.getDocument(\n        Path.resolve(\n          this.cldrPath,\n          'common',\n          'supplemental',\n          'supplementalData.xml'\n        )\n      ),\n    ]);\n\n    const territoryInfoByTerritoryId = {};\n    for (const territoryNode of finder(\n      '/supplementalData/territoryInfo/territory'\n    )) {\n      const territoryId = territoryNode.getAttribute('type');\n      territoryInfoByTerritoryId[territoryId] = {\n        id: territoryId,\n        gdp: parseInt(territoryNode.getAttribute('gdp'), 10),\n        literacyPercent: parseFloat(\n          territoryNode.getAttribute('literacyPercent')\n        ),\n        population: parseInt(territoryNode.getAttribute('population'), 10),\n        languages: [],\n      };\n    }\n    for (const languagePopulationNode of finder(\n      '/supplementalData/territoryInfo/territory/languagePopulation'\n    )) {\n      const territoryId = languagePopulationNode.parentNode.getAttribute(\n        'type'\n      );\n      const languageInfo = {\n        id: languagePopulationNode.getAttribute('type'),\n        populationPercent: parseFloat(\n          languagePopulationNode.getAttribute('populationPercent')\n        ),\n      };\n      const officialStatus = languagePopulationNode.getAttribute(\n        'officialStatus'\n      );\n      if (officialStatus) {\n        languageInfo.officialStatus = officialStatus;\n      }\n      const writingPercent = languagePopulationNode.getAttribute(\n        'writingPercent'\n      );\n      if (writingPercent) {\n        languageInfo.writingPercent = parseFloat(writingPercent);\n      }\n      territoryInfoByTerritoryId[territoryId].languages.push(languageInfo);\n    }\n    return territoryInfoByTerritoryId;\n  },\n\n  extractTerritoryContainmentGroups() {\n    const finder = this.createFinder([\n      this.getDocument(\n        Path.resolve(\n          this.cldrPath,\n          'common',\n          'supplemental',\n          'supplementalData.xml'\n        )\n      ),\n    ]);\n\n    const territoryContainmentGroups = {};\n\n    const isSeenByType = {};\n    const parentRegionIdByType = {};\n\n    for (const groupNode of finder(\n      '/supplementalData/territoryContainment/group'\n    )) {\n      const type = groupNode.getAttribute('type');\n      const contains = groupNode.getAttribute('contains').split(' ');\n\n      if (!isSeenByType[type]) {\n        // Only look at the first occurence of a 'type', the first one overrides any items after it with the same type\n        isSeenByType[type] = true;\n\n        territoryContainmentGroups[type] = {\n          type,\n          contains,\n        };\n\n        contains.forEach((id) => {\n          parentRegionIdByType[id] = type;\n        });\n      }\n    }\n\n    for (const type of Object.keys(territoryContainmentGroups)) {\n      // Territory containment groups that are not themselves somehow linked to the root world group '001', are not exposed because they're not part of the tree structure\n      if (!(type in parentRegionIdByType)) {\n        if (type !== '001') {\n          delete territoryContainmentGroups[type];\n        }\n      } else {\n        territoryContainmentGroups[type].parent = parentRegionIdByType[type];\n      }\n    }\n\n    return territoryContainmentGroups;\n  },\n\n  extractSubdivisionContainmentGroups() {\n    const finder = this.createFinder([\n      this.getDocument(\n        Path.resolve(\n          this.cldrPath,\n          'common',\n          'supplemental',\n          'subdivisions.xml'\n        )\n      ),\n    ]);\n\n    const subdivisionContainmentGroups = {};\n    const parentRegionIdByType = {};\n\n    for (const groupNode of finder(\n      '/supplementalData/subdivisionContainment/subgroup'\n    )) {\n      const type = groupNode.getAttribute('type');\n      const contains = groupNode.getAttribute('contains').split(' ');\n\n      subdivisionContainmentGroups[type] = {\n        type,\n        contains,\n      };\n\n      for (const id of contains) {\n        parentRegionIdByType[id] = type;\n      }\n    }\n\n    for (const type of Object.keys(subdivisionContainmentGroups)) {\n      if (typeof parentRegionIdByType[type] !== 'undefined') {\n        subdivisionContainmentGroups[type].parent = parentRegionIdByType[type];\n      }\n    }\n\n    return subdivisionContainmentGroups;\n  },\n\n  extractLanguageSupplementalData() {\n    const finder = this.createFinder([\n      this.getDocument(\n        Path.resolve(\n          this.cldrPath,\n          'common',\n          'supplemental',\n          'supplementalData.xml'\n        )\n      ),\n    ]);\n\n    const languageData = {};\n\n    for (const languageNode of finder(\n      '/supplementalData/languageData/language'\n    )) {\n      const type = languageNode.getAttribute('type');\n      const isSecondary = languageNode.getAttribute('alt') === 'secondary';\n      let record;\n\n      if (!languageData[type]) {\n        languageData[type] = record = {};\n      }\n\n      if (isSecondary) {\n        languageData[type].secondary = record = {};\n      }\n\n      const scriptsAttr = languageNode.getAttribute('scripts');\n      if (scriptsAttr) {\n        record.scripts = scriptsAttr.split(' ');\n      }\n\n      const territoriesAttr = languageNode.getAttribute('territories');\n      if (territoriesAttr) {\n        record.territories = territoriesAttr.split(' ');\n      }\n    }\n\n    return languageData;\n  },\n\n  extractLanguageSupplementalMetadata() {\n    const finder = this.createFinder([\n      this.getDocument(\n        Path.resolve(\n          this.cldrPath,\n          'common',\n          'supplemental',\n          'supplementalMetadata.xml'\n        )\n      ),\n    ]);\n\n    const languageData = {};\n\n    for (const languageAliasNode of finder(\n      '/supplementalData/metadata/alias/languageAlias'\n    )) {\n      const type = languageAliasNode.getAttribute('type');\n      languageData[type] = {\n        replacement: languageAliasNode.getAttribute('replacement'),\n        reason: languageAliasNode.getAttribute('reason'),\n      };\n    }\n\n    return languageData;\n  },\n\n  /**\n   * Weekdata contains various week related info, grouped by territory or locale\n   * Defaults are indicated by territory=\"001\" or locale=\"und\"\n   *\n   * https://www.unicode.org/reports/tr35/tr35-55/tr35-dates.html#Week_Data\n   */\n  extractWeekData() {\n    const finder = this.createFinder([\n      this.getDocument(\n        Path.resolve(\n          this.cldrPath,\n          'common',\n          'supplemental',\n          'supplementalData.xml'\n        )\n      ),\n    ]);\n\n    const weekData = {\n      minDays: [],\n      firstDay: [],\n      weekendStart: [],\n      weekendEnd: [],\n      weekOfPreference: [],\n    };\n\n    for (const minDaysNode of finder('/supplementalData/weekData/minDays')) {\n      const territories = minDaysNode\n        .getAttribute('territories')\n        .split(/\\s+/)\n        .filter((x) => x);\n      const count = minDaysNode.getAttribute('count');\n      weekData.minDays.push({\n        territories,\n        count,\n      });\n    }\n\n    for (const firstDayNode of finder('/supplementalData/weekData/firstDay')) {\n      const territories = firstDayNode\n        .getAttribute('territories')\n        .split(/\\s+/)\n        .filter((x) => x);\n      const day = firstDayNode.getAttribute('day');\n      const alt = firstDayNode.getAttribute('alt');\n      weekData.firstDay.push({\n        territories,\n        day,\n        variant: alt === 'variant',\n      });\n    }\n\n    for (const weekendStartNode of finder(\n      '/supplementalData/weekData/weekendStart'\n    )) {\n      const territories = weekendStartNode\n        .getAttribute('territories')\n        .split(/\\s+/)\n        .filter((x) => x);\n      const day = weekendStartNode.getAttribute('day');\n      weekData.weekendStart.push({\n        territories,\n        day,\n      });\n    }\n\n    for (const weekendEndNode of finder(\n      '/supplementalData/weekData/weekendEnd'\n    )) {\n      const territories = weekendEndNode\n        .getAttribute('territories')\n        .split(/\\s+/)\n        .filter((x) => x);\n      const day = weekendEndNode.getAttribute('day');\n      weekData.weekendEnd.push({\n        territories,\n        day,\n      });\n    }\n\n    for (const weekOfPreferenceNode of finder(\n      '/supplementalData/weekData/weekOfPreference'\n    )) {\n      const locales = weekOfPreferenceNode.getAttribute('locales').split(/\\s+/);\n      const ordering = weekOfPreferenceNode.getAttribute('ordering');\n      weekData.weekOfPreference.push({\n        locales,\n        ordering,\n      });\n    }\n\n    return weekData;\n  },\n\n  extractTextToSpeechCharacterLabels(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'annotations')\n    );\n\n    const characterLabels = {};\n    for (const node of finder('/ldml/annotations/annotation[@type=\"tts\"]')) {\n      characterLabels[node.getAttribute('cp')] =\n        characterLabels[node.getAttribute('cp')] || node.textContent;\n    }\n\n    return characterLabels;\n  },\n\n  extractDerivedTextToSpeechCharacterLabels(localeId) {\n    this.checkValidLocaleId(localeId);\n    const finder = this.createFinder(\n      this.getPrioritizedDocumentsForLocale(localeId, 'annotationsDerived')\n    );\n\n    const characterLabels = {};\n    for (const node of finder('/ldml/annotations/annotation[@type=\"tts\"]')) {\n      characterLabels[node.getAttribute('cp')] =\n        characterLabels[node.getAttribute('cp')] || node.textContent;\n    }\n\n    return characterLabels;\n  },\n\n  extractAllTextToSpeechCharacterLabels(localeId) {\n    return {\n      ...this.extractDerivedTextToSpeechCharacterLabels(localeId),\n      ...this.extractTextToSpeechCharacterLabels(localeId),\n    };\n  },\n};\n\nmodule.exports = new Cldr(Path.resolve(__dirname, '../3rdparty/cldr/'));\nmodule.exports.load = (cldrPath) => new Cldr(cldrPath);\n"]},"metadata":{},"sourceType":"script"}